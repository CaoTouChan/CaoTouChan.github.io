---
layout: post
title: 数据结构和算法（08）：二叉树
date: 2019-06-05 01:02:08.000000000 +09:00
---
## 存储

* 链式存储

![](http://ww3.sinaimg.cn/large/006tNc79ly1g4hu7y9igoj30vq0kejro.jpg)

* 顺序存储

![](http://ww1.sinaimg.cn/large/006tNc79ly1g4hu8a2cn8j30vq0g9q33.jpg)

## 访问方式

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4hu7370wzj30vq0g6gmk.jpg)

## 二叉查找树

### 定义

二叉查找树 ： 在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。

### 查找

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4hu5m3evij30vq0h4t8t.jpg)

### 插入

![](http://ww4.sinaimg.cn/large/006tNc79ly1g4hu61pfpmj30vq0gqmxa.jpg)

### 删除

删除操作有三种情况：

1. 要删除的节点没有子节点，直接删除

2. 要删除的几点只有一个子节点，则将其父节点指向其子节点

3. 有两个子节点，则找到右子树中的最小节点，替换到要删除的节点。如下

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4hu94fwkbj30vq0h8t97.jpg)

### 输出有序序列

**中序** 遍历二叉查找树，可以输出有序的数据序列，时间复杂度是 $$O(n)$$。

### 支持重复数据

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4hua6rp3oj30vq0ffq2x.jpg)

### 时间复杂度

平衡二叉查找树的高度接近 logn，所以插入、删除、查找操作的时间复杂度也比较稳定，是 O(logn)。

## 红黑树

### 平衡二叉查找树

平衡二叉树：二叉树中任意一个节点的左右子树的高度相差不能大于 1。

平衡二叉查找树：不仅满足上面平衡二叉树的定义，还满足二叉查找树的特点。比如 AVL 树、Splay Tree（伸展树）、Treap（树堆）、红黑树等。

### 红黑树定义

1. 根节点是黑色的；

2. 每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</p>

3. 任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；

4. 每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；

![](http://ww3.sinaimg.cn/large/006tNc79ly1g4huavyjirj30vq0d5aa6.jpg)


## 常见问题

1. 散列表的插入、删除、查找操作的时间复杂度可以做到常量级的 O(1)，而二叉查找树在比较平衡的情况下，插入、删除、查找操作时间复杂度才是 O(logn)，为什么还要用二叉查找树呢？

* 散列表是无序存储，二叉查找树中序遍历可以在 O(n) 时间复杂度下输出有序序列

* 散列表扩容耗时多

* 散列表存在哈希冲突问题，实际查找速度未必比 O(logn) 快

* 散列表需要考虑散列函数设计、哈希冲突、扩容等问题，平衡二叉查找树考虑平衡性问题，前者比较复杂

2. 为什么在工程中大家都喜欢用红黑树这种平衡二叉查找树，而不是其他的平衡二叉查找树？

Treap 、 Splay Tree 操作效率高，但是无法避免极端情况下时间复杂度退化。AVL 树高度平衡，所以维护代价高。红黑树只是近似平衡，所有维护成本比 AVL 树低，其插入、删除、查找等性能比较稳定。









