<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈草头</title>
    <description>90 后 | 广东人 | 现居住于帝都 | 算法攻城狮</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 29 Jun 2019 10:00:57 +0800</pubDate>
    <lastBuildDate>Sat, 29 Jun 2019 10:00:57 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Elasticsearch 实战（04）CRUD 和批量操作</title>
        <description>&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ========== 创建文档 ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create document 自动生成 _id&lt;/span&gt;
POST &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-04-15T14:12:12&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Kibana&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create document 指定Id。如果id已经存在，报错&lt;/span&gt;
PUT &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1?op_type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;create
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-05-15T14:12:12&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Elasticsearch&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create document. 指定 ID 如果已经存在，就报错&lt;/span&gt;
PUT &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_create/1
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-05-15T14:12:12&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Elasticsearch&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ======== 通过 ID 获取文档 =============&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Get the document by ID&lt;/span&gt;
GET &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1


&lt;span class=&quot;c&quot;&gt;# ===========  Index &amp;amp; Update ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Update 指定 ID  (先删除，在写入)&lt;/span&gt;
GET &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1

PUT &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Mike&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# GET users/_doc/1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  在原文档上增加字段&lt;/span&gt;
POST &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_update/1/
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-05-15T14:12:12&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Elasticsearch&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;c&quot;&gt;# ======= 通过 ID 删除 ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 删除文档&lt;/span&gt;
DELETE &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1


&lt;span class=&quot;c&quot;&gt;# ========= Bulk 操作 ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 执行两次，查看每次的结果&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 执行第1次&lt;/span&gt;
POST _bulk
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;delete&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;update&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;field2&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 执行第2次&lt;/span&gt;
POST _bulk
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;delete&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;update&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;field2&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# =========== mget 操作 =============&lt;/span&gt;
GET /_mget
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# URI中指定index&lt;/span&gt;
GET /test/_mget
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


GET /_mget
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_source&quot;&lt;/span&gt; : &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_source&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;field3&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;field4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_source&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;include&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
                &lt;span class=&quot;s2&quot;&gt;&quot;exclude&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user.location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ========== msearch 操作 ========&lt;/span&gt;
POST kibana_sample_data_ecommerce/_msearch
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;match_all&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;:1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;kibana_sample_data_flights&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;match_all&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;:2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# ============ 清除测试数据 =========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 清除数据&lt;/span&gt;
DELETE &lt;span class=&quot;nb&quot;&gt;users
&lt;/span&gt;DELETE &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;DELETE test2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 27 Jun 2019 11:52:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-CRUD/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-CRUD/</guid>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（03）索引、文档、节点、分片</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4g145kf5dj30qk0dwgmo.jpg&quot; alt=&quot;基本概念&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，文档和分片、索引和节点，其实从开发和运维的两个不同视角下的产物。&lt;/p&gt;

&lt;p&gt;和 RDBMS 的相关概念做一个不太准确的类比：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RDBMS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Elasticsearch&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;table&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;index ( type )&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;row&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;document&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;column&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;field&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;schema&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;mapping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SQL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DSL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;文档&quot;&gt;文档&lt;/h2&gt;

&lt;p&gt;文档是 ES 中所有可搜索数据的 &lt;strong&gt;最小单位&lt;/strong&gt;，比如：日志文件中的日志项、一张唱片的详情等。&lt;/p&gt;

&lt;p&gt;它会被序列化成 &lt;strong&gt;JSON&lt;/strong&gt; 格式 （ 无需预定格式、类型可以指定也可以自动推算、可嵌套，支持数组 ）。&lt;/p&gt;

&lt;p&gt;每个文档都有一个 &lt;strong&gt;Unique ID&lt;/strong&gt;，可以自己指定，也可以由 ES 自动生成。&lt;/p&gt;

&lt;p&gt;文档的元数据标注了文档相关信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_index : 文档所属索引名
_type ： 文档所以类型名
_id ：文档唯一 id
_score ：相关性分数
_source : 文档原始 JSON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4g14tahrqj30nw0g20vc.jpg&quot; alt=&quot;文档&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;索引&quot;&gt;索引&lt;/h2&gt;

&lt;p&gt;索引是一类文档的集合，体现了逻辑空间的概念，有自己的 Mapping 定义，包含文档的字段名和字段类型。（分片体现的是物理空间的概念，索引中的数据分散在分片上）&lt;/p&gt;

&lt;p&gt;其中，索引的Mapping 定义文档字段的类型。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;mapping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alias&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;ignore_above&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setting 定义了不同的数据分布。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;number_of_shards&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;auto_expand_replicas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;provided_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kibana_sample_data_logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;creation_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1561535052961&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;number_of_replicas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ZgZxux9QTfW4e-oVoP3ogA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;7010099&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 ES 7.0 之前，一个索引可以设置锁哥 Type，但是从 7.0 开始一个索引只能设置一个 Type —— 也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;_doc&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;7.0 弃用了接受类型的 API，引入了新的无类型 API，并移除了对 &lt;code class=&quot;highlighter-rouge&quot;&gt;_default_&lt;/code&gt; 映射的支持。&lt;/p&gt;

&lt;p&gt;8.0 将移除接受类型的 API。&lt;/p&gt;

&lt;h2 id=&quot;索引相关操作&quot;&gt;索引相关操作&lt;/h2&gt;

&lt;p&gt;Kibana 中管理索引的界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4g15epyy1j31mg0u0k10.jpg&quot; alt=&quot;Kibana操作&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Kibana 的 dev tools 下操作索引的相关 API ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//查看索引相关信息
GET kibana_sample_data_logs

//查看索引的文档总数
GET kibana_sample_data_logs/_count

//查看前10条文档，了解文档格式
POST kibana_sample_data_logs/_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

//_cat indices API
//查看indices，使用通配符
GET /_cat/indices/kibana&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;?v&amp;amp;s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;index

//查看状态为绿的索引
GET /_cat/indices?v&amp;amp;health&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;green

//按照文档个数排序
GET /_cat/indices?v&amp;amp;s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docs.count:desc

//查看具体的字段
GET /_cat/indices/kibana&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;?pri&amp;amp;v&amp;amp;h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;health,index,pri,rep,docs.count,mt

//How much memory is used per index?
GET /_cat/indices?v&amp;amp;h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i,tm&amp;amp;s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tm:desc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;集群&quot;&gt;集群&lt;/h2&gt;

&lt;p&gt;ES 中不同集群通过不同名字区分，默认是 “elasticsearch”。通过配置文件或者命令行指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;-E cluster.name=xxx&lt;/code&gt; 来指定。一个集群可以有一个或多个节点。&lt;/p&gt;

&lt;p&gt;集群的健康状态：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Green ：主分片和副本都分配正常
Yellow ：主分片正常，副本分片未能正常分配
Red ： 有主分片未能正常分配，例如服务器磁盘占用超过 85% 时试图创建索引
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;节点&quot;&gt;节点&lt;/h2&gt;

&lt;p&gt;节点时 ES 的一个实例，本质上是一个 JAVA 进程。一台机器可以运行多个 ES 进程，但工业环境一般一天机器只运行一个 ES 实例。&lt;/p&gt;

&lt;p&gt;每个节点都有一个名字，通过配置文件或者命令行  &lt;code class=&quot;highlighter-rouge&quot;&gt;-E node.name=xxx&lt;/code&gt; 指定。&lt;/p&gt;

&lt;p&gt;每个节点启动后会分配一个 ID，保存在 data 目录下。&lt;/p&gt;

&lt;h3 id=&quot;master-eligible-node-和-master-node&quot;&gt;Master-eligible node 和 Master node&lt;/h3&gt;

&lt;p&gt;每个节点启动后都会成为 Master-eligible node，可以参与选举成为 Master node，可以设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;node.master=false&lt;/code&gt; 来禁止。&lt;/p&gt;

&lt;p&gt;只有 Master node 能修改集群信息。每个节点都保存了集群信息，包含：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;所有节点信息
所有索引和相关 Mapping 和 Setting
分片的路由信息
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;data-node-和-coordinating-node&quot;&gt;Data node 和 Coordinating node&lt;/h3&gt;

&lt;p&gt;Data node 保存分片的数据。&lt;/p&gt;

&lt;p&gt;Coordinating node 接受客户端请求，将请求分发得到结果后汇总。每个节点默认都有 Coordinating node 的职责。&lt;/p&gt;

&lt;h3 id=&quot;其他类型的-node&quot;&gt;其他类型的 node&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Hot &amp;amp; Warm Node
 Machine Learning Node
 Tribe Node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;节点配置&quot;&gt;节点配置&lt;/h3&gt;

&lt;p&gt;在生产环境中，每个节点都应该配置成 &lt;strong&gt;单一&lt;/strong&gt; 的节点类型。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;节点类型&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;配置参数&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;默认值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;master eligible&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.master&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ingest&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.ingest&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;coordinating only&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;每个节点默认都是 coordinating，设置其他类型为 false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;machine learning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.nl&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true ( 需 enable x-pack )&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;分片&quot;&gt;分片&lt;/h2&gt;

&lt;p&gt;主分片 （ Primary Shard ）解决水平扩展，可以将数据分布到集群内所有节点。一个分片是一个 Lucene 实例。主分片数在在索引创建时指定，不允许修改（除非 reindex）。&lt;/p&gt;

&lt;p&gt;副本 （ Replica Shard ） 解决数据高可用，可以动态调整。&lt;/p&gt;

&lt;p&gt;以下是一个三节点集群的分片情况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4g15wryeyj314a0eugnu.jpg&quot; alt=&quot;分片示例&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;集群节点相关操作&quot;&gt;集群、节点相关操作&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get _cat/nodes?v
GET /_nodes/es7_01,es7_02
GET /_cat/nodes?v
GET /_cat/nodes?v&amp;amp;h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;,ip,port,v,m


GET _cluster/health
GET _cluster/health?level&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shards
GET /_cluster/health/kibana_sample_data_logs
GET /_cluster/health/kibana_sample_data_logs?level&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shards

&lt;span class=&quot;c&quot;&gt;#### cluster state&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#### The cluster state API allows access to metadata representing the state of the whole cluster. This includes information such as&lt;/span&gt;
GET /_cluster/state

//cluster get settings
GET /_cluster/settings
GET /_cluster/settings?include_defaults&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true

&lt;/span&gt;GET _cat/shards
GET _cat/shards?h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;index,shard,prirep,state,unassigned.reason
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料和相关阅读&quot;&gt;参考资料和相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch核心技术与实战 （极客时间 阮一鸣） &lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为什么不再支持单个Index下，多个Tyeps &lt;a href=&quot;https://www.elastic.co/cn/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0&quot;&gt;https://www.elastic.co/cn/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Index API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-indices.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-indices.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Nodes API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-nodes.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-nodes.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cluster API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cluster.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cluster.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Shards API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 27 Jun 2019 09:52:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-ind-node/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-ind-node/</guid>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（02）安装 —— ES / Kibana / Logstash</title>
        <description>&lt;h2 id=&quot;elasticsearch-安装和简单配置&quot;&gt;Elasticsearch 安装和简单配置&lt;/h2&gt;

&lt;p&gt;ES 安装的地址请 &lt;a href=&quot;https://www.elastic.co/cn/downloads/elasticsearch&quot;&gt;点击这儿&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES 在 7.0 开始内置了 JAVA 环境，不需要像之前版本一样设置 $JAVA_HOME。&lt;/p&gt;

&lt;h3 id=&quot;目录结构&quot;&gt;目录结构&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;目录&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;配置&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bin&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;脚本文件，包括启动 ES、安装插件、运行统计数据等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;config&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch.yml&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;集群配置文件，user 、role based 相关配置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JDK&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;path.data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JAVA 运行环境&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;数据文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;lib&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JAVA 类库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;log&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;path.log&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;日志文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;modules&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;包含所有 ES 模块&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pliugin&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;包含素有已安装插件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;jvm-配置&quot;&gt;JVM 配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;修改 JVM  —— config/jvm.options&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置建议：Xms 和 Xmx 配置成一样，不要超过机器内存的 50%，不要超过 30 GB&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;测试&quot;&gt;测试&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//启动单节点
bin/elasticsearch

//安装插件
bin/elasticsearch-plugin &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;analysis-icu
//查看插件
bin/elasticsearch-plugin list
//查看安装的插件
GET http://localhost:9200/_cat/plugins?v

// 本机启动多节点集群 （-d 表示后台运行）
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node0 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node0_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node1 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node1_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node2 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node2_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node3 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node3_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;

//查看集群
GET http://localhost:9200

//查看nodes
GET _cat/nodes
GET _cluster/health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kibana-安装&quot;&gt;Kibana 安装&lt;/h2&gt;

&lt;p&gt;Kibana 下载地址请 &lt;a href=&quot;https://www.elastic.co/cn/downloads/kibana&quot;&gt;点击这儿&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 启动 kibana
bin/kibana

// 插件
bin/kibana-plugin list
bin/kibana-plugin &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;plugin_location
bin/kibana remove

//查看
GET http://localhost:5601

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;在-docker-中运行-eskibana-和-cerebro&quot;&gt;在 Docker 中运行 ES、Kibana 和 Cerebro&lt;/h2&gt;

&lt;p&gt;切换到你想要的文件夹，新建一个文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yaml&lt;/code&gt; ，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &lt;span class=&quot;s1&quot;&gt;'2.2'&lt;/span&gt;
services:
  cerebro:
    image: lmenezes/cerebro:0.8.3
    container_name: cerebro
    ports:
      - &lt;span class=&quot;s2&quot;&gt;&quot;9000:9000&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;:
      - &lt;span class=&quot;nt&quot;&gt;-Dhosts&lt;/span&gt;.0.host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://elasticsearch:9200
    networks:
      - es7net
  kibana:
    image: docker.elastic.co/kibana/kibana:7.1.0
    container_name: kibana7
    environment:
      - &lt;span class=&quot;nv&quot;&gt;I18N_LOCALE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zh-CN
      - &lt;span class=&quot;nv&quot;&gt;XPACK_GRAPH_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;TIMELION_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;XPACK_MONITORING_COLLECTION_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
    ports:
      - &lt;span class=&quot;s2&quot;&gt;&quot;5601:5601&quot;&lt;/span&gt;
    networks:
      - es7net
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0
    container_name: es7_01
    environment:
      - cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime
      - node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01
      - bootstrap.memory_lock&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;s2&quot;&gt;&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;&lt;/span&gt;
      - discovery.seed_hosts&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01
      - cluster.initial_master_nodes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01,es7_02
    ulimits:
      memlock:
        soft: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
        hard: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
    volumes:
      - es7data1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - es7net
  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0
    container_name: es7_02
    environment:
      - cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime
      - node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_02
      - bootstrap.memory_lock&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;s2&quot;&gt;&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;&lt;/span&gt;
      - discovery.seed_hosts&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01
      - cluster.initial_master_nodes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01,es7_02
    ulimits:
      memlock:
        soft: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
        hard: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
    volumes:
      - es7data2:/usr/share/elasticsearch/data
    networks:
      - es7net


volumes:
  es7data1:
    driver: &lt;span class=&quot;nb&quot;&gt;local
  &lt;/span&gt;es7data2:
    driver: &lt;span class=&quot;nb&quot;&gt;local

&lt;/span&gt;networks:
  es7net:
    driver: bridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用 docker-compose 启动：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//启动
docker-compose up

//停止容器
docker-compose down

//停止容器并且移除数据
docker-compose down &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;logstach-的安装和数据导入&quot;&gt;Logstach 的安装和数据导入&lt;/h2&gt;

&lt;p&gt;Logstash 下载地址请 &lt;a href=&quot;https://www.elastic.co/cn/downloads/logstash&quot;&gt;点击这儿&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//下载与ES相同版本号的logstash，并解压到相应目录
//修改movielens目录下的logstash.conf文件
//path修改为实际的movies.csv路径
input &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  file &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    path &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YOUR_FULL_PATH_OF_movies.csv&quot;&lt;/span&gt;
    start_position &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;beginning&quot;&lt;/span&gt;
    sincedb_path &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dev/null&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

//启动Elasticsearch实例，然后启动 logstash，并制定配置文件导入数据
bin/logstash &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /YOUR_PATH_of_logstash.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料和相关阅读&quot;&gt;参考资料和相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch核心技术与实战 （极客时间 阮一鸣） &lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ES 安装 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ES 配置 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ES 重要配置 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;初识 Kibana &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/setup.html&quot;&gt;https://www.elastic.co/guide/en/kibana/current/setup.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kibana 插件 &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/known-plugins.html&quot;&gt;https://www.elastic.co/guide/en/kibana/current/known-plugins.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Elasticsearch on Kuvernetes &lt;a href=&quot;https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond&quot;&gt;https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Plugins API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-plugins.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-plugins.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 Docker &lt;a href=&quot;https://www.docker.com/products/docker-desktop&quot;&gt;https://www.docker.com/products/docker-desktop&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 docker-compose &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;https://docs.docker.com/compose/install/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何创建自己的 Docker Image - &lt;a href=&quot;https://www.elastic.co/cn/blog/how-to-make-a-dockerfile-for-elasticsearch&quot;&gt;https://www.elastic.co/cn/blog/how-to-make-a-dockerfile-for-elasticsearch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何在为 Docker Image 安装 Elasticsearch 插件 - &lt;a href=&quot;https://www.elastic.co/cn/blog/elasticsearch-docker-plugin-management&quot;&gt;https://www.elastic.co/cn/blog/elasticsearch-docker-plugin-management&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何设置 Docker 网络 - &lt;a href=&quot;https://www.elastic.co/cn/blog/docker-networking&quot;&gt;https://www.elastic.co/cn/blog/docker-networking&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Cerebro 源码 &lt;a href=&quot;https://github.com/lmenezes/cerebro&quot;&gt;https://github.com/lmenezes/cerebro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Jun 2019 18:50:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-install/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-install/</guid>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（01）综述</title>
        <description>&lt;h2 id=&quot;综述&quot;&gt;综述&lt;/h2&gt;

&lt;p&gt;Elasticsearch 是一个分布式搜索引擎，可以实现大数据近实时分析，其高性能和易扩展、易使用性受到众多公司的青睐。&lt;/p&gt;

&lt;p&gt;这个系列文章基于 Elasticsearch 7.0 进行探索和实践，参考 极客时间的 《 Elasticsearch核心技术与实战 》 系列专栏。&lt;/p&gt;

&lt;h2 id=&quot;分布式架构&quot;&gt;分布式架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4fyr77qigj30fb0bv74n.jpg&quot; alt=&quot;分布式架构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;集群规模可以从单个扩展到数百个节点，从服务和数据两个维度实现高可用和水平拓展。 ES 支持不用的节点类型，支持 Hot &amp;amp; Warm 架构。&lt;/p&gt;

&lt;h2 id=&quot;集成方式&quot;&gt;集成方式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;支持多种编程语言类库，如 Java/.NET/Python/PHP/Perl etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RESTful API （推荐） 和 Transport API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JDBC &amp;amp; ODBC&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;版本对比&quot;&gt;版本对比&lt;/h2&gt;

&lt;h3 id=&quot;5x-新特性&quot;&gt;5.x 新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于 Lucene 6.x，默认打分从 TF-IDF 改为 BM25&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持 Ingest 节点、Painless Scripting、Completion suggestion&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type 标记成 deprecated， 支持 Keyword 类型&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instant aggregation，支持分片上聚合的缓存&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新增 Profile API&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6x-新特性&quot;&gt;6.x 新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于 Lucene 7.x&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持跨集群复制 （CCR）、索引生命周期管理、SQL&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据迁移优化&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;优化稀疏字段存储&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;索引时进行排序，加快查询&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7x-新特性&quot;&gt;7.x 新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于 Lucene 8.0，正式废除单索引多 Type 的支持&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Security 功能免费&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ECK —— Elasticsearch Operator on Kubernetes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Cluster coordination&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feature-Complete High Level REST Client&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Script Score Query&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;默认 Primary Shard 从 5 变成 1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;产品生态圈&quot;&gt;产品生态圈&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4fyu8h14oj30k00a1755.jpg&quot; alt=&quot;产品生态圈&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Logstash ：开源服务器端数据处理管道，支持不同来源的数据采集、转换、存储，实现解析和转换数据，可拓展（插件安装，Log、DB、Arcsign、Netflow），可靠性，数据传输加密、监控&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kibana ： 数据可视化&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BEATS ： 轻量的数据采集器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;X-Pack ： 商业化套件，OSS、Basic、黄金级、白金级，基础班免费&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;应用场景&quot;&gt;应用场景&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;搜索类 ：集成数据库同步数据、不推荐作为独立数据存储使用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日志类 ： Logstash 和 Beats 满足不用的数据源， Kafka 作为消息队列&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4fyurnrqfj30ij09hmyy.jpg&quot; alt=&quot;日志类技术栈&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考链接与相关阅读&quot;&gt;参考链接与相关阅读&lt;/h2&gt;

&lt;p&gt;[1] Elasticsearch核心技术与实战 （极客时间 阮一鸣）&lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] Elasticsearch Certification &lt;a href=&quot;https://www.elastic.co/cn/training/certification&quot;&gt;https://www.elastic.co/cn/training/certification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] ElasticSearch Engineering I training &lt;a href=&quot;https://www.elastic.co/cn/training/elasticsearch-engineer-1&quot;&gt;https://www.elastic.co/cn/training/elasticsearch-engineer-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4] ElasticSearch Engineering II training &lt;a href=&quot;https://www.elastic.co/cn/training/elasticsearch-engineer-2&quot;&gt;https://www.elastic.co/cn/training/elasticsearch-engineer-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5] ES 7.0 发布 &lt;a href=&quot;https://www.elastic.co/blog/elasticsearch-7-0-0-released&quot;&gt;https://www.elastic.co/blog/elasticsearch-7-0-0-released&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6] X-Pack 开源 &lt;a href=&quot;https://www.elastic.co/products/x-pack/open&quot;&gt;https://www.elastic.co/products/x-pack/open&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[7] 用户案例 &lt;a href=&quot;https://www.elastic.co/cn/use-cases/&quot;&gt;https://www.elastic.co/cn/use-cases/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[8] Top 5 Elasticsearch Use Cases &lt;a href=&quot;https://www.objectrocket.com/blog/elasticsearch/top-elasticsearch-use-cases/&quot;&gt;https://www.objectrocket.com/blog/elasticsearch/top-elasticsearch-use-cases/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[9] Elastic Stack — A Brief Introduction &lt;a href=&quot;https://hackernoon.com/elastic-stack-a-brief-introduction-794bc7ff7d4f&quot;&gt;https://hackernoon.com/elastic-stack-a-brief-introduction-794bc7ff7d4f&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 26 Jun 2019 18:46:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-intro/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-intro/</guid>
        
        
      </item>
    
      <item>
        <title>数据结构和算法（01）：链表</title>
        <description>&lt;h2 id=&quot;链表结构&quot;&gt;链表结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4hslsz71zj30h4061mxb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4hsm586h2j30h5062wen.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4hsmejoe8j30h6065weo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4hsml8sv9j30gw07kq3a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;时间复杂度以及双向链表的优势&quot;&gt;时间复杂度以及双向链表的优势&lt;/h2&gt;

&lt;p&gt;理论上，单链表的插入、删除操作时间复杂度都是 O(1) ，而随机访问元素的时间复杂度是 O(n)。&lt;/p&gt;

&lt;p&gt;在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;删除结点中“值等于某个给定值”的结点；&lt;/li&gt;
  &lt;li&gt;删除给定指针指向的结点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于第一种情况，无论是单链表还是双向链表，单纯删除操作时间复杂度是 O(1)，但是遍历查找复杂度是 O(n)。&lt;/p&gt;

&lt;p&gt;对于第二种情况，双向链表可以直接获取前驱节点再执行操作，时间复杂度是 O(1)。&lt;/p&gt;

&lt;p&gt;对于一个有序链表，双向链表的按值查询的效率比较高 —— 因为可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。&lt;/p&gt;

&lt;h2 id=&quot;和数组的对比&quot;&gt;和数组的对比&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;数组&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;连续内存空间，可以借助 CPU 缓存机制，访问效率高。&lt;/li&gt;
  &lt;li&gt;大小固定，扩容时数组拷贝费时&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;链表&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;不是连续存储，无法有效预读。&lt;/li&gt;
  &lt;li&gt;天然支持动态扩容&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;相关算法题总结&quot;&gt;相关算法题总结&lt;/h2&gt;

&lt;h3 id=&quot;leetcode-876-middle-of-the-linked-list&quot;&gt;LeetCode 876. Middle of the Linked List&lt;/h3&gt;

&lt;p&gt;寻找单向链表的中间节点。&lt;/p&gt;

&lt;p&gt;可以设置两个指针 fast 和 slow 指向 head。以 fast 步长为 2，slow 步长为 1开始循环遍历链表。当 fast 指针遍历到尾节点或者 NULL 时结束循环。此时，slow 指向的节点就是中间节点。&lt;/p&gt;

&lt;h3 id=&quot;leetcode-206-reverse-linked-list&quot;&gt;LeetCode 206. Reverse Linked List&lt;/h3&gt;

&lt;p&gt;反转单向链表。&lt;/p&gt;

&lt;p&gt;设链表为 head -&amp;gt; … -&amp;gt; cur -&amp;gt; a -&amp;gt; b。则获取 a 之后，cur.next = b，a.next= head，head = a。完成一个反转。循环直至结束。&lt;/p&gt;

&lt;p&gt;核心代码如下。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;leetcode-237-delete-node-in-a-linked-list&quot;&gt;LeetCode 237. Delete Node in a Linked List&lt;/h3&gt;

&lt;p&gt;给定 node 指针删除单向链表节点。&lt;/p&gt;

&lt;p&gt;直接使用 node.next.val 替换 node.val，然后改变指针指向。&lt;/p&gt;

&lt;h3 id=&quot;leetcode-21-merge-two-sorted-lists&quot;&gt;LeetCode 21. Merge Two Sorted Lists&lt;/h3&gt;

&lt;p&gt;合并两个排序链表。&lt;/p&gt;

&lt;p&gt;设置冗余节点 dummy 作为头结点。双指针遍历链表接到 dummy 之后，返回 dummy.next。&lt;/p&gt;

&lt;h3 id=&quot;leetcode-83-remove-duplicates-from-sorted-list&quot;&gt;LeetCode 83. Remove Duplicates from Sorted List&lt;/h3&gt;

&lt;p&gt;移除排序链表的重复元素。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;leetcode-141-linked-list-cycle&quot;&gt;LeetCode 141. Linked List Cycle&lt;/h3&gt;

&lt;p&gt;检查链表是否循环链表。&lt;/p&gt;

&lt;p&gt;设置快慢指针 fast （步长为 2） 和 slow （步长为 1）。如果有一个遍历到空值，则不是循环链表。如果有有一个追上另一个（表现为 fast.val 等于 slow.val），则存在循环。&lt;/p&gt;

&lt;h3 id=&quot;leetcode-234-palindrome-linked-list&quot;&gt;LeetCode 234. Palindrome Linked List&lt;/h3&gt;

&lt;p&gt;检查单向链表是否回文链表。&lt;/p&gt;

&lt;p&gt;首先找到链表的中间节点（见 LeetCode 876）。此时 slow 为中间节点。&lt;/p&gt;

&lt;p&gt;然后反转 slow 之后的节点（见 LeetCode 206）。&lt;/p&gt;

&lt;p&gt;此时，如果是回文链表则可以从头指针和中间节点指针后遍历得到相同的值。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        :type head: ListNode
        :rtype: bool
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nextNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextNode&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;leetcode-203-remove-linked-list-elements&quot;&gt;LeetCode 203. Remove Linked List Elements&lt;/h3&gt;

&lt;p&gt;移除链表中值为 val 的所有元素。&lt;/p&gt;

&lt;p&gt;设置 dummy 指针指向 head 节点。设置 cur = dummy。遍历链表，如 cur.next 等于 val，则 cur.next = cur.next.next。返回 dummy.next。&lt;/p&gt;

&lt;h3 id=&quot;leetcode-160-intersection-of-two-linked-lists&quot;&gt;LeetCode 160. Intersection of Two Linked Lists&lt;/h3&gt;

&lt;p&gt;获取两个单项链表的交点（如下图，返回 8），不相交则返回 NULL。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4hsmvvf4oj30cd03umx1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置指针 pa 和 pb 指向各自链表的访问位置，开始遍历链表。&lt;/p&gt;

&lt;p&gt;当遍历到 null 节点时指针指向另一个链表。如果这个过程中遍历到值相等的节点，则返回。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;设 len(A) = a + c，a 为相交节点及之前节点长度，c 为之后。len(B) = b + c。
如果存在相交节点，则有 (a + c) + b == (b + c) + a&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;leetcode-328-odd-even-linked-list&quot;&gt;LeetCode 328. Odd Even Linked List&lt;/h3&gt;

&lt;p&gt;将单向链表中，索引计数为双数的节点，接到索引计数为单数的节点后。如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
Output: 1-&amp;gt;3-&amp;gt;5-&amp;gt;2-&amp;gt;4-&amp;gt;NULL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oddEvenList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;odd_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;even_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even_head&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 记得把 odd 指针指向 even 链表部分的 “头” 节点
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;leetcode-86-partition-list&quot;&gt;LeetCode 86. Partition List&lt;/h3&gt;

&lt;p&gt;给定链表和一个值 x，把链表中小于 x 的节点全部放到大于等于 x 的节点前，这两部分（小于 和 大于等于）需要保留各自的原始顺序。比如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Input: head = 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;2, x = 3
Output: 1-&amp;gt;2-&amp;gt;2-&amp;gt;4-&amp;gt;3-&amp;gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置两个链表partition 各自的 dummy 指针和当前指针。遍历链表，如果当前的节点小于 x ，则接到 小于的那部分，反之为大于等于那部分，更新当前指针和遍历链表的指针。代码如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dummy_lt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dummy_gt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dummy_gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dummy_lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;leetcode-148-sort-list&quot;&gt;LeetCode 148. Sort List&lt;/h3&gt;

&lt;p&gt;对链表进行排序，要求 O(n log n) 的时间复杂度和常数空间复杂度。&lt;/p&gt;

&lt;p&gt;首先找到中间节点，然后使用归并排序就可以了。&lt;/p&gt;

&lt;h3 id=&quot;leetcode-19-remove-nth-node-from-end-of-list&quot;&gt;LeetCode 19. Remove Nth Node From End of List&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-82-remove-duplicates-from-sorted-list-ii&quot;&gt;LeetCode 82. Remove Duplicates from Sorted List II&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-142-linked-list-cycle-ii&quot;&gt;LeetCode 142. Linked List Cycle II&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-2-add-two-numbers&quot;&gt;LeetCode 2. Add Two Numbers&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-143-reorder-list&quot;&gt;LeetCode 143. Reorder List&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-61-rotate-list&quot;&gt;LeetCode 61. Rotate List&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-138-copy-list-with-random-pointer&quot;&gt;LeetCode 138. Copy List with Random Pointer&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-25-reverse-nodes-in-k-group&quot;&gt;LeetCode 25. Reverse Nodes in k-Group&lt;/h3&gt;

&lt;h3 id=&quot;leetcode-23-merge-k-sorted-lists&quot;&gt;LeetCode 23. Merge k Sorted Lists&lt;/h3&gt;

</description>
        <pubDate>Wed, 05 Jun 2019 00:01:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/alg-linked-list/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/alg-linked-list/</guid>
        
        
      </item>
    
      <item>
        <title>模型压缩</title>
        <description>&lt;h2 id=&quot;network-pruning-网络剪枝&quot;&gt;Network Pruning （网络剪枝）&lt;/h2&gt;

&lt;p&gt;从权重和神经元的角度考虑，网络经常是 over-parameterized 的。所以，我们通过剪枝来缩小网络规模。(&lt;a href=&quot;http://papers.nips.cc/paper/250-optimal-brain-damage.pdf&quot; title=&quot;LeCun, Yann, John S. Denker, and Sara A. Solla. &amp;quot;Optimal brain damage.&amp;quot; Advances in neural information processing systems. 1990.&quot;&gt;Yann Le Cun et al., 1990&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;流程&quot;&gt;流程&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD;
A(预训练网络_网络较大) --&amp;gt; B[评估重要性];
B --&amp;gt; C[去除部分_网络较小];
C --&amp;gt; D[微调];
D --&amp;gt; E{符合条件吗};
E --&amp;gt;|是|F[更小的网络];
E --&amp;gt;|否|B
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;重要性的评估可以有：
    &lt;ol&gt;
      &lt;li&gt;权重：L1、L2 ……&lt;/li&gt;
      &lt;li&gt;神经元：在给定数据集中非零的次数 ……&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;剪枝后，准确率会下降，通过在 &lt;strong&gt;训练集&lt;/strong&gt; 上微调来 recover。但是不要一次剪枝过多，要不然会难以 recover。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;剪枝的原因&quot;&gt;剪枝的原因&lt;/h3&gt;

&lt;p&gt;既然我们要剪枝，为什么不一开始训练一个小的网络？对这个问题，有一些不同的观点。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;众所周知，更小的网络会更难优化。(&lt;a href=&quot;https://www.youtube.com/watch?v=_VuWvQUMQVk&quot; title=&quot;Deep Learning Theory 2-4: Geometry of Loss Surfaces (Conjecture)&quot;&gt;李宏毅 Deep Learning Theory 2-4: Geometry of Loss Surfaces (Conjecture)&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lottery Ticket Hypothesis&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以往我们剪枝后，就重新随机初始化参数，如下图路线 红 -&amp;gt; 紫 -&amp;gt; 绿，但是效果并不好。但是，如果我们剪枝后将原始随机初始化的参数 copy 过来再训练，发现效果还不错。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4gwoplwqgj314f0u00wx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lottery Ticket Hypothesis (&lt;a href=&quot;https://arxiv.org/abs/1803.03635&quot; title=&quot;Frankle, Jonathan, and Michael Carbin. &amp;quot;The lottery ticket hypothesis: Finding sparse, trainable neural networks.&amp;quot; arXiv preprint arXiv:1803.03635 (2018).&quot;&gt;Jonathan Frankle et al., 2018&lt;/a&gt;) 认为，若将整个大的网络看做多个小的网络，其中有些小网络可以训练，有的无法训练。于是我们 copy 原始参数会一定程度上拷贝成功的经验。&lt;/p&gt;

&lt;p&gt;但是，&lt;a href=&quot;https://arxiv.org/abs/1810.05270&quot; title=&quot;Liu, Zhuang, et al. &amp;quot;Rethinking the value of network pruning.&amp;quot; arXiv preprint arXiv:1810.05270 (2018).&quot;&gt;Zhuang Liu et al., 2018&lt;/a&gt; 对此提出了不同的观点，其使用真正的随机初始化代替 Lottery Ticket Hypothesis 中提到的方法，发现效果并不差：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gwpaa62qj30x4088dh8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;practical-issue&quot;&gt;Practical Issue&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;权值剪枝（ weight pruning ）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4gwpil5mtj30ty0cg0tm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;权值剪枝后会使得网络变得不规则，难以实现，也难以加速（因为 GPU 加速也是进行矩阵运算）。&lt;/p&gt;

&lt;p&gt;所以，其实权值剪枝工程上会用置零来代替真正的权值剪枝。但是这种情况实际上并没有减小网络规模。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1608.03665.pdf&quot; title=&quot;Wen, Wei, et al. &amp;quot;Learning structured sparsity in deep neural networks.&amp;quot; Advances in neural information processing systems. 2016.&quot;&gt;Wei Wen  et al., 2016&lt;/a&gt; 对其进行评估，效果显示剪枝 90%+ 的情况下，性能只是下降2%&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gwpr3qh3j30y00b4mye.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;神经元剪枝（ Neuron pruning ）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gwpyho2gj30ui0c275b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很明显，剪枝后是规则的网络模型，容易实现，也易于加速。&lt;/p&gt;

&lt;h2 id=&quot;knowledge-distillation-知识蒸馏&quot;&gt;Knowledge Distillation （知识蒸馏）&lt;/h2&gt;

&lt;h3 id=&quot;基本框架&quot;&gt;基本框架&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1503.02531.pdf&quot; title=&quot;Hinton, Geoffrey, Oriol Vinyals, and Jeff Dean. &amp;quot;Distilling the knowledge in a neural network.&amp;quot; arXiv preprint arXiv:1503.02531 (2015).&quot;&gt;Geoffrey Hinton et al., 2015&lt;/a&gt; 提出 Knowledge Distillation 的框架进行模型压缩。其主要思想是通过一个 Teacher - Student 的结构，将模型集合中的知识提炼到单个模型中。如下图，这个模型让人惊喜的地方在于，即便 smaller network 里边没有接触到 “7” 这个训练样本，也有一定的机会预测出来，因为 teacher 网络中是一个包含概率的网络，这一点可能会被 student 网络学习到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gwqkihzfj30ft08yjrl.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Kaggle 比赛中，我们经常会集成多个模型来进行预测。但是工业上不可能同时跑这么多个模型，Knowledge Distillation 使得 smaller network 一定程度上实现了集成学习。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gwqsmrvwj30g8097aaa.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;temperature&quot;&gt;Temperature&lt;/h3&gt;

&lt;p&gt;论文中提到 一个称之为 Temperature 的概念。在有些训练的最后，我们会使用 Sofamax。为了产生更加 soft 的目标概率分布，用了一个 Temperature 对最后一层的输出进行转换，如下：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;y_{i}=\frac{\exp \left(x_{i}\right)}{\sum_{j} \exp \left(x_{j}\right)} \underset{T=100}{\longrightarrow} \quad y_{i}=\frac{\exp \left(x_{i} / T\right)}{\sum_{j} \exp \left(x_{j} / T\right)}&lt;/script&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{lll}{x_{1}=100} &amp; {y_{1}=1} &amp; {x_{1} / T=1} &amp; {y_{1}=0.56} \\ {x_{2}=10} &amp; {y_{2} \approx 0} &amp; {x_{2} / T=0.1} &amp; {y_{2}=0.23} \\ {x_{3}=1} &amp; {y_{3} \approx 0} &amp; {x_{3} / T=0.01} &amp; {y_{3}=0.21}\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;另外，&lt;a href=&quot;https://arxiv.org/pdf/1312.6184.pdf&quot; title=&quot;Ba, Jimmy, and Rich Caruana. &amp;quot;Do deep nets really need to be deep?.&amp;quot; Advances in neural information processing systems. 2014.&quot;&gt;Lei Jimmy Ba  et al., 2015&lt;/a&gt; 凭经验证明浅层前馈网络可以学习以前通过深网学习的复杂函数，并实现以前只有深模型才能实现的精度。此外，在某些情况下，浅层神经网络可以使用与原始深层模型相同数量的参数来学习这些深层函数。 在TIMIT音素识别和CIFAR-10图像识别任务中，可以训练浅层神经网来执行类似于复杂、更深层次的卷积架构。&lt;/p&gt;

&lt;h2 id=&quot;parameter-quantization-参数量化&quot;&gt;Parameter Quantization （参数量化）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用更少的位数来表示一个值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Weight Clustering&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过 Kmeans 之类的算法，将权值聚合。那么我们将可以使用 Table 中的四个数来表达表中的值，比如说橙色表示的几个数都是 (-3.4 -5 .0) / 2 = - 4.2。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gwr087ewj30gg04pq33.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;更进一步的，通过哈夫曼编码之类的算法，可以用较少的比特表示频繁的簇，用更多的比特表示稀有的簇&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Binary Weights&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gwr81omzj30g3082q33.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，根据最近的 “点” （ network with binary weights ） 进行更新直到满意。&lt;/p&gt;

&lt;p&gt;下图是 Binary Connect 的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gwrfizyqj30fq084my1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考 [2] [3] [4]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;architecture-design-结构设计&quot;&gt;Architecture Design （结构设计）&lt;/h2&gt;

&lt;p&gt;从结构设计上入手来压缩模型，可能是业界比较实用的方法，其基本框架如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gwruacsbj30g409hdfx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在两层之间插入一层来达到压缩模型的效果。以标准 CNN 来举个例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gws3ayqmj30f40bg3zb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，我们需要 72 个参数。改进后：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gwsbcfxwj30f20b5dg7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gwslhl2ij30fg0bp74r.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gwsxvsljj30gb0c4wez.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;相关模型参考 [5] [6] [7] [8]&lt;/p&gt;

&lt;h2 id=&quot;dynamic-computation-动态计算&quot;&gt;Dynamic Computation （动态计算）&lt;/h2&gt;

&lt;p&gt;动态计算的思想是在资源充足的情况下运行比较复杂的、耗资源的模型。资源不充足的情况下减少运算量，先求出堪用的结果。可能的解决方案有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;训练多个模型：这中方式太耗费存储资源（特别是手机之类的设备）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中间层加入分类器，在资源不足的情况下使用前边的分类器，如下图：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gwt7d5l4j307w056mx3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，一般情况下，网络具备泛化能力和底层抽出的简单特征有关，如果在底层加入分类器，相当于迫使其放弃简单特征，这种方式会造成一定的问题。参考 &lt;a href=&quot;https://arxiv.org/pdf/1703.09844.pdf&quot; title=&quot;Huang, Gao, et al. &amp;quot;Multi-scale dense networks for resource efficient image classification.&amp;quot; arXiv preprint arXiv:1703.09844 (2017).&quot;&gt;Gao Huang et al., 2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gwtg541lj30lp09iwfo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gwtnjxs4j30lp09st9s.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;[1]. &lt;a href=&quot;http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2019/Lecture/Small%20(v6).pdf&quot;&gt;台灣大學 李宏毅 《Network Compression》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]. &lt;a href=&quot;https://arxiv.org/abs/1511.00363&quot;&gt;Binary Connect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3]. &lt;a href=&quot;https://arxiv.org/abs/1602.02830&quot;&gt;Binary Network&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4]. &lt;a href=&quot;https://arxiv.org/abs/1603.05279&quot;&gt;XNOR-net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5]. &lt;a href=&quot;https://arxiv.org/abs/1602.07360&quot;&gt;SqueezeNet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6]. &lt;a href=&quot;https://arxiv.org/abs/1704.04861&quot;&gt;MobileNet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[7]. &lt;a href=&quot;https://arxiv.org/abs/1707.01083&quot;&gt;ShuffleNet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[8]. &lt;a href=&quot;https://arxiv.org/abs/1610.02357&quot;&gt;Xception&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 30 May 2019 14:50:01 +0800</pubDate>
        <link>http://localhost:4000/2019/05/model-compress/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/model-compress/</guid>
        
        
      </item>
    
      <item>
        <title>够用就好的 Docker 教程</title>
        <description>&lt;h2 id=&quot;核心概念&quot;&gt;核心概念&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Docker images （镜像） ：不可变的主模板，用于抽出完全相同的容器。镜像包含应用程序需要运行的Dockerfile、库和代码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dockerfile ：一个文件，其中包含Docker应如何构建映像的说明。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Docker Container （容器）：Docker 镜像加上命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run image_name&lt;/code&gt; 将从镜像创建并启动容器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Container Registry ：存储 Docker 镜像的远程位置。将镜像推送到 Registry 并从 Registry 中提取镜像。 可以托管自己的 Registry 或使用提供商的 Registry，例如 AWS 和 Google Cloud 都有 Registry。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Engine  ：client-server app (&lt;a href=&quot;https://docs.docker.com/install/&quot;&gt;CE&lt;/a&gt; or &lt;a href=&quot;https://www.docker.com/products/docker-enterprise&quot;&gt;Enterprise&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Client  ：处理 Docker CLI 来和 Daemon 进行交互&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gu1y6d91j30gu09ft93.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Daemon （守护进程）  ：侦听 Docker API 请求的 Docker 服务器，用来管理图像、容器、网络和卷。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Volumes  （卷）：存储应用程序使用和创建的持久数据的最佳方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Docker Hub  ： 默认的 Docker Registry&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repository  ：具有相同名称和不同标记的 Docker 镜像的集合。 标签是镜像的标识符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Networking  ：连接容器。连接的 Docker 容器可以位于同一主机或多个主机上。 有关Docker网络的更多信息，请参阅 &lt;a href=&quot;https://www.oreilly.com/learning/what-is-docker-networking&quot;&gt;此文章&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gu2kay5sj307308p747.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Compose  ：方便运行需要多个Docker容器的应用程序的工具。 Docker Compose 允许您将命令移动到 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 文件中以供重用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Swarm  ：一个协调容器部署的产品。 参考 &lt;a href=&quot;https://docs.docker.com/get-started/#recap-and-cheat-sheet&quot;&gt;官方Docker教程&lt;/a&gt; 。 推文作者建议不要花时间在Docker Swarm上，除非你有令人信服的理由这样做。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Services  ：分布式应用程序的不同部分。Services 只运行一个映像，但它编码了映像的运行方式 ：端口、容器运行副本个数等等。Services 允许您跨多个 Docker Daemon 扩展容器，并使 Docker Swarms 成为可能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kubernetes ：Kubernetes 自动化部署、扩展和管理容器化的应用程序。使用 Kubernetes 扩展具有多个 Docker 容器的项目。 （ Kubernetes 不是 Docker 的官方部分; 它更像是 Docker 的 BFF 。）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dockerfile-指令&quot;&gt;Dockerfile 指令&lt;/h2&gt;

&lt;p&gt;Dockerfile 指引 Docker 构建将用于制作容器的镜像。&lt;/p&gt;

&lt;p&gt;当调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; 以创建镜像时，会假定 Dockerfile 位于当前工作目录中。 可以使用文件标志（&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;）指定其他位置。&lt;/p&gt;

&lt;p&gt;容器从一系列的 layer 中构建，&lt;strong&gt;除了最后一层都是只读&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Dockerfile 指示添加哪些层和添加的顺序。每层实际上只是一个包含自上一层以来的更改的文件。基础层（ The base image ） 包含提供初始层。&lt;/p&gt;

&lt;p&gt;将映像从远程存储库提取到本地计算机时，仅下载本地计算机上尚未存在的层。&lt;/p&gt;

&lt;p&gt;Dockerfile指令是一行的开头的大写单词，后跟其参数。&lt;/p&gt;

&lt;p&gt;示例 Dockerfile ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM python:3.7.2-alpine3.8
LABEL maintainer=&quot;jeffmshale@gmail.com&quot;
ENV ADMIN=&quot;jeff&quot;
RUN apk update &amp;amp;&amp;amp; apk upgrade &amp;amp;&amp;amp; apk add bash
COPY . ./app
ADD https://raw.githubusercontent.com/discdiver/pachy-vid/master/sample_vids/vid1.mp4 \
/my_app_directory
RUN [&quot;mkdir&quot;, &quot;/a_directory&quot;]
CMD [&quot;python&quot;, &quot;./my_script.py&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; : 指定 base (parent) image.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; 是镜像 repository ， &lt;code class=&quot;highlighter-rouge&quot;&gt;18.04&lt;/code&gt; 是标签（tag）。没有标签则拉取最新版本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gu2u1j9hj30g80bajro.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建容器时，可以在只读层的顶部添加可写层。当图像运行时，如果某个层需要由容器修改，则该文件将被复制到顶部可写层中。 了解有关 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy-on-write&lt;/code&gt; 的更多信息，点击 &lt;a href=&quot;https://docs.docker.com/v17.09/engine/userguide/storagedriver/imagesandcontainers/&quot;&gt;链接&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LABEL&lt;/code&gt; : 提供元数据 （ metadata ）。更多信息点击 &lt;a href=&quot;https://docs.docker.com/config/labels-custom-metadata/&quot;&gt;链接&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; : 设置持久化环境变量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; : 运行命令，创建镜像层。用于安装包到容器中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; : 拷贝文件和目录到容器中。目标目录不存在的话会自行创建。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; : 将文件和目录复制到容器。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 不同的地方：
(1) 可用于将文件从远程URL移动到容器 
(2) 可以 upack 本地 的 .tar 文件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; 指令包含&lt;code class=&quot;highlighter-rouge&quot;&gt; \ &lt;/code&gt; 实现分解多行的长指令，使用它来提高可读性。&lt;/p&gt;

&lt;p&gt;Docker文档不建议以这种方式使用远程URL，因为您无法删除文件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; : 给运行时容器提供命令和参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 可以包含可执行文件。 如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 不存在可执行文件，则必须存在 &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; 指令。 在这种情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; 指令都应采用JSON格式。&lt;/p&gt;

&lt;p&gt;docker 的命令行参数运行&lt;strong&gt;覆盖&lt;/strong&gt; Dockerfile 中提供给 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 的参数。&lt;/p&gt;

&lt;p&gt;以下是另一个示例 Dockerfile：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM python:3.7.2-alpine3.8
LABEL maintainer=&quot;jeffmshale@gmail.com&quot;
## Install dependencies
RUN apk add --update git
## Set current working directory
WORKDIR /usr/src/my_app_directory
## Copy code from your local context to the image working directory
COPY . .
## Set default value for a variable
ARG my_var=my_default_value
## Set code to run at container run time
ENTRYPOINT [&quot;python&quot;, &quot;./app/my_script.py&quot;, &quot;my_var&quot;]
## Expose our port to the world
EXPOSE 8000
## Create a volume for data storage
VOLUME /my_volume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有几种方法可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 安装软件包：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;apk&lt;/code&gt;在 Alpine Docker 映像中安装软件包。 具有基本 Ubuntu 映像的 Dockerfile 中的包可以像这样更新和安装：&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install my_package&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;wheel&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt;安装 Python 包。其他语言可以使用各种安装程序。（请确保在尝试使用包管理器之前安装包管理器）请使用 ` \ ` 拆分多行。&lt;/li&gt;
  &lt;li&gt;在文件中列出包需求，通常将文件命名为 &lt;strong&gt;requirements.txt&lt;/strong&gt;。下文将分享一个推荐的模式使用 requirements.txt 来利用构建时缓存。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; : 设置后续指令的工作目录。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;最好使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; 设置绝对路径，而不是使用Dockerfile中的cd命令浏览文件系统。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果目录不存在， &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; 会自动创建目录。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; 指令。 如果提供了相对路径，则每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; 指令都会更改当前工作目录。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt; : 定义一个在构建时传递给 Docker 的变量。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;与 &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; 变量不同，&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt; 变量不可用于运行容器。 但是，在构建映像时，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt; 值从命令行设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; 变量的默认值。 然后，&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; 变量在容器运行时间内持续存在。 在 &lt;a href=&quot;https://vsupalov.com/docker-build-time-env-values/&quot;&gt;此处&lt;/a&gt; 详细了解此技术。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; : 在容器启动时提供默认命令和参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;，但如果使用命令行参数运行容器，则不会覆盖&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;参数。相反，&lt;strong&gt;传递给 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run my_image_name&lt;/code&gt; 的命令行参数会附加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; 指令的参数中&lt;/strong&gt;。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run my_image bash&lt;/code&gt; 将参数&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; 添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; 指令的现有参数的末尾。&lt;/p&gt;

&lt;p&gt;Dockerfile至少应有一条&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;指令。&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;之间进行选择的建议：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每次需要运行相同的命令时，请关注&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;当容器将用作可执行程序时，请关注&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;当您需要提供可以从命令行覆盖的额外默认参数时，请支持&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXPOSE&lt;/code&gt; : 显示要发布的端口，以提供对正在运行的容器的访问。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXPOSE&lt;/code&gt; 实际上并不发布端口。 相反，它充当构建镜像的人和运行容器的人之间的文档。&lt;/p&gt;

&lt;p&gt;使用带有&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; 标志的 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; 可以在运行时发布和映射一个或多个端口。 大写的 &lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt; 标志将发布所有暴露的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VOLUME&lt;/code&gt; : 创建目录挂载点以访问和存储持久化数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，关于 Dockerfile 的小抄，请点击 &lt;a href=&quot;https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index&quot;&gt;此链接&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;压缩-docker-镜像&quot;&gt;压缩 Docker 镜像&lt;/h2&gt;

&lt;h3 id=&quot;缓存&quot;&gt;缓存&lt;/h3&gt;

&lt;p&gt;在检查每条指令时，Docker在其缓存中查找现有的中间镜像，它可以重复使用而不是创建新的（重复的）中间镜像。&lt;/p&gt;

&lt;p&gt;大多数新指令只是与中间镜像中的指令进行比较。如果匹配，则使用缓存副本。&lt;/p&gt;

&lt;p&gt;一些实用缓存的建议：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; 传递 ` –no-cache = True` 可以关闭缓存。&lt;/li&gt;
  &lt;li&gt;将可能更改的指令放在Dockerfile中尽可能低的位置。&lt;/li&gt;
  &lt;li&gt;链式的 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN apt-get update&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install&lt;/code&gt; 命令可避免缓存缺失问题。&lt;/li&gt;
  &lt;li&gt;如果使用包装安装程序（如&lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;和 requirements.txt 文件），请按照下面的模型进行操作，以确保没有收到带有 requirements.txt 中列出的旧包的旧版本中间镜像。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;COPY requirements.txt /tmp/
RUN pip install -r /tmp/requirements.txt
COPY . /tmp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;size-reduction&quot;&gt;Size Reduction&lt;/h3&gt;

&lt;p&gt;Alpine基础映像是一个完整的Linux发行版，没有太多其他内容。 下载通常不到5mb，但它要求您花更多的时间编写构建工作应用程序所需的依赖项的代码。&lt;/p&gt;

&lt;p&gt;如果你的容器中需要Python，那么Python Alpine构建是一个很好的折衷方案。&lt;/p&gt;

&lt;h3 id=&quot;多阶段构建&quot;&gt;多阶段构建&lt;/h3&gt;

&lt;p&gt;多级构建使用多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; 指令，每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; 指令：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;begins a new stage of the build.&lt;/li&gt;
  &lt;li&gt;leaves behind any state created in prior stages.&lt;/li&gt;
  &lt;li&gt;can use a different base.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;多阶段构建示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM golang:1.7.3 AS build
WORKDIR /go/src/github.com/alexellis/href-counter/
RUN go get -d -v golang.org/x/net/html  
COPY app.go .
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

FROM alpine:latest  
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=build /go/src/github.com/alexellis/href-counter/app .
CMD [&quot;./app&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过在 &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; 指令中附加名称来命名第一个阶段。 然后在 Dockerfile 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY --from =&lt;/code&gt; 指令中引用指定的阶段。&lt;/p&gt;

&lt;p&gt;有时多级构建会增加更多复杂性，使图像难以维护，因此您可能不会在大多数构建中使用它们。 请参阅进一步讨论：&lt;a href=&quot;https://blog.realkinetic.com/building-minimal-docker-containers-for-python-applications-37d0272c52f3&quot;&gt;权衡&lt;/a&gt; 和 &lt;a href=&quot;https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae&quot;&gt;高阶模式&lt;/a&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;dockerignore&quot;&gt;.dockerignore&lt;/h3&gt;

&lt;p&gt;.dockerignore类似于.gitignore，其中包含Docker与文件名匹配的模式列表，并在制作镜像时排除。&lt;/p&gt;

&lt;p&gt;使用 Go 的 &lt;a href=&quot;https://golang.org/pkg/path/filepath/#Match&quot;&gt;filepath.Match 规则&lt;/a&gt;  和一些 &lt;a href=&quot;https://docs.docker.com/v17.09/engine/reference/builder/#dockerignore-file&quot;&gt;Docker 自身的规则&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;size-inspection&quot;&gt;Size Inspection&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看正在运行的容器大小： &lt;code class=&quot;highlighter-rouge&quot;&gt;docker container ls -s&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示镜像的大小： &lt;code class=&quot;highlighter-rouge&quot;&gt;docker image ls&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看中间镜像的大小：&lt;code class=&quot;highlighter-rouge&quot;&gt;docker image history my_image：my_tag&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker image inspect my_image&lt;/code&gt;：tag将显示有关镜像的许多内容，包括每个 layer 的大小。layer 和中间镜像的复杂性，查看Nigel Brown的 &lt;a href=&quot;https://windsock.io/explaining-docker-image-ids/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装和使用 &lt;a href=&quot;https://github.com/wagoodman/dive&quot;&gt;dive&lt;/a&gt; 可以轻松查看 layer 的内容。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;几个实用的建议&quot;&gt;几个实用的建议&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;尽可能使用官方的 base image。&lt;/li&gt;
  &lt;li&gt;尽可能使用 Alpine 镜像的变体来保持镜像的量级。&lt;/li&gt;
  &lt;li&gt;如果使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;，在同一指令中将 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN apt-get update&lt;/code&gt;与 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install&lt;/code&gt; 结合使用（减少了构建的层数），如：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
 package-one \
 package-two 
 &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 指令的末尾包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp; rm -rf / var / lib / apt / lists / *&lt;/code&gt; 以清理 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; 缓存，使其不存储在层中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过在 Dockerfile 中放置可能更改的指令，明智地使用缓存。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 .dockerignore 文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 &lt;a href=&quot;https://github.com/wagoodman/dive&quot;&gt;dive&lt;/a&gt; 检查 Docker 镜像层方便压缩规模。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;不要安装不需要的包。（- ，- b）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;

&lt;h3 id=&quot;containers&quot;&gt;Containers&lt;/h3&gt;
&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;docker container my_command&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; — Create a container from an image.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start &lt;/code&gt;— Start an existing container.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;run &lt;/code&gt;— Create a new container and start it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; — List running containers.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inspect &lt;/code&gt;— See lots of info about a container.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logs &lt;/code&gt;— Print logs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stop&lt;/code&gt; — Gracefully stop running container.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt; —Stop main process in container abruptly.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;— Delete a stopped container.&lt;/p&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;
&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;docker image my_command&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build &lt;/code&gt;— Build an image.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;push &lt;/code&gt;— Push an image to a remote registry.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls &lt;/code&gt;— List images.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; — See intermediate image info.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inspect &lt;/code&gt;— See lots of info about an image, including the layers.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm &lt;/code&gt;— Delete an image.&lt;/p&gt;

&lt;h3 id=&quot;misc&quot;&gt;Misc&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker version&lt;/code&gt; — List info about your Docker Client and Server versions.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker login &lt;/code&gt;— Log in to a Docker registry.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker system prune &lt;/code&gt;— Delete all unused containers, unused networks, and dangling images.&lt;/p&gt;

&lt;h2 id=&quot;卷volumedocker-中的数据&quot;&gt;卷（Volume）：Docker 中的数据&lt;/h2&gt;

&lt;h3 id=&quot;临时数据&quot;&gt;临时数据&lt;/h3&gt;

&lt;p&gt;通过两种方式临时保存文件：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;默认情况下，容器内应用程序创建的文件存储在容器的可写层中。当容器不再存在时，数据也将消失。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保存临时数据同时具有更好的性能：&lt;code class=&quot;highlighter-rouge&quot;&gt;tmpfs mount&lt;/code&gt; 使用主机内存进行临时挂载，具有更快的读写操作的优点。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;持久化数据&quot;&gt;持久化数据&lt;/h3&gt;

&lt;p&gt;两种持久化数据的方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将文件系统挂载到容器。使用绑定装载，Docker外部的进程也可以修改数据。绑定挂载很难备份，迁移或与其他Container共享。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gu37znbcj30ca06jq2z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用卷（Volume）保存数据是更好的方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;卷&quot;&gt;卷&lt;/h3&gt;

&lt;p&gt;卷是一个文件系统，它位于任何容器之外的主机上。 卷由Docker创建和管理。 卷的特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;持久化&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自由浮动的文件系统，与任何一个容器分开&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;与其他容器共用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;高效的输入和输出&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能够托管在远程云提供商上&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可加密&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可命名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能够通过容器预先填充其内容&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方便测试&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;创建卷&quot;&gt;创建卷&lt;/h3&gt;

&lt;p&gt;通过 Dockerfile 或 API 请求创建卷。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VOLUME / my_volume&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用Dockerfile创建卷，则仍需要在运行时声明卷的安装点。&lt;/p&gt;

&lt;p&gt;还可以使用JSON数组格式在 Dockerfile 中创建卷。&lt;/p&gt;

&lt;p&gt;卷也可以在运行时从命令行实例化。&lt;/p&gt;

&lt;h3 id=&quot;volume-cli-命令&quot;&gt;Volume CLI 命令&lt;/h3&gt;

&lt;p&gt;常用的命令：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume create —-name my_volume&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume ls&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume inspect my_volume&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume rm my_volume&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume prune&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;docker run中的–mount标志的常用选项 -  mount my_options my_image：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type=volume&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source=volume_name&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;destination=/path/in/container&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;[1]. &lt;a href=&quot;https://medium.com/search?q=Learn%20Enough%20Docker%20to%20be%20Useful&quot;&gt;Learn Enough Docker to be Useful&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 May 2019 14:50:01 +0800</pubDate>
        <link>http://localhost:4000/2019/05/docker-intro/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/docker-intro/</guid>
        
        
      </item>
    
      <item>
        <title>结构化学习（4）：序列标记（ Sequence Labeling ）</title>
        <description>&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;

&lt;p&gt;序列标记问题，是一个序列到另一个序列的映射，表达为下式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gtpu974wj30dj07sdft.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;序列标记有很多应用，比如 POS tagging、Morphosyntactic Attributes、Named Entity Recognition、Tokenization、Code switching 和 Dialogue acts 等。&lt;/p&gt;

&lt;p&gt;以 POS tagging 为例，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gtq3wc0pj30hr07r3yw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hidden-markov-model-hmm&quot;&gt;Hidden Markov Model (HMM)&lt;/h2&gt;

&lt;h3 id=&quot;生成句子的步骤&quot;&gt;生成句子的步骤&lt;/h3&gt;

&lt;p&gt;我们如何生成一个句子呢？考虑以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根据语法生成 POS 序列&lt;/li&gt;
  &lt;li&gt;根据 POS 序列生成句子 （句子的单词从词典抽取）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4gtqbwu95j309i07gaa1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;举例来说，假设有以下 POS 转化关系（马尔柯夫链）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gtqilpboj30k70dydgs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;步骤二转化概率如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gtqp6kfzj30je0dawf3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;综上，可描述为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gtqvpdmcj30g00aojrn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不失一般性的，我们有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(x, y)=P(y) P(x | y)&lt;/script&gt;

&lt;p&gt;** Step 1 : Transition probability **&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(y)=P\left(y_{1} | s t a r t\right) \times \prod_{l=1}^{L-1} P\left(y_{l+1} | y_{l}\right) \times P\left(e n d | y_{L}\right)&lt;/script&gt;

&lt;p&gt;** Step 2：Emission probability **&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(x | y)=\prod_{l=1}^{L} P\left(x_{l} | y_{l}\right)&lt;/script&gt;

&lt;p&gt;考虑上边的例子，可以使用计数来计算 
&lt;script type=&quot;math/tex&quot;&gt;P(x, y)&lt;/script&gt;
：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gtrckhy9j30ip08174n.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;用-hmm-处理-pos-tagging&quot;&gt;用 HMM 处理 POS tagging&lt;/h3&gt;

&lt;p&gt;POS tagging 问题，如下图，就是给定 
&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;
 去求解可能性最大的 
&lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;
 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gtrnoxp5j308105d748.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} y &amp;=\arg \max _{y \in Y} P(y | x) \\ &amp;=\arg \max _{y \in Y} \frac{P(x, y)}{P(x)} \\ &amp;=\arg \max _{y \in \mathbb{Y}} P(x, y) \end{aligned} %]]&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：P(x) 固定，对结果无影响；由上一小节可知 P(x,y) 可以计算得到&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，我们的目标是：&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\tilde{y}=\arg \max _{y \in \mathbb{Y}} P(x, y)&lt;/script&gt;
假设有 
&lt;script type=&quot;math/tex&quot;&gt;|S|&lt;/script&gt;
 个 tag，序列 
&lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;
 的长度为 
&lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;
，则枚举所有 
&lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;
 共有 
&lt;script type=&quot;math/tex&quot;&gt;|s|^{L}&lt;/script&gt;
 个。但是，可以使用 &lt;strong&gt;Viterbi algorithm&lt;/strong&gt; 求解这个问题，时间复杂度仅为 
&lt;script type=&quot;math/tex&quot;&gt;O\left(L|S|^{2}\right)&lt;/script&gt;
 。&lt;/p&gt;

&lt;h3 id=&quot;结构化学习中的-hmm&quot;&gt;结构化学习中的 HMM&lt;/h3&gt;

&lt;p&gt;将 HMM 对应到结构化学习的统一框架：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Problem 1: Evaluation&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x, y)=P(x, y)=P(y) P(x | y)&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Problem 2: Inference&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tilde{y}=\arg \max _{y \in \mathbb{Y}} P(x, y)&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Problem 3: Training&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(y) 和 P(x|y) 可以直接从训练数据集中得到&lt;/script&gt;

&lt;h3 id=&quot;hmm-的问题&quot;&gt;HMM 的问题&lt;/h3&gt;

&lt;p&gt;在 Inference 阶段：
&lt;script type=&quot;math/tex&quot;&gt;\tilde{y}=\arg \max _{y \in \mathbb{Y}} P(x, y)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;为了获得最佳答案，需要：
&lt;script type=&quot;math/tex&quot;&gt;(x, \hat{y}) : P(x, \hat{y})&gt;P(x, y)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;但是这一点，HMM 无法保证。考虑以下例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gtrwybg0j30j505p74d.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过计算，会得到最终路径是：N-&amp;gt; V -&amp;gt; A&lt;/p&gt;

&lt;p&gt;这种情形实际上就是说一些在训练数据中从未见过的 
&lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt;
 可能会获得更大的 
&lt;script type=&quot;math/tex&quot;&gt;P(x,y)&lt;/script&gt;
。（当然，这一点对于小数据集可能是有利的）&lt;/p&gt;

&lt;p&gt;对于这个问题（Transition 和 Emission 的 model 是 independent 的），条件随机场 ( CRF ) 可以使用相同模型进行解决。&lt;/p&gt;

&lt;h2 id=&quot;conditional-random-field-crf&quot;&gt;Conditional Random Field (CRF)&lt;/h2&gt;

&lt;h3 id=&quot;模型描述&quot;&gt;模型描述&lt;/h3&gt;

&lt;p&gt;CRF 模型的描述是 （下一小节详述）：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{P}(x, y) \propto \exp (w \cdot \phi(x, y))&lt;/script&gt;

&lt;p&gt;其中，
&lt;script type=&quot;math/tex&quot;&gt;\phi(x, y)&lt;/script&gt;
 是一个特征向量，
&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;
 是需要从训练集中学习的 weight vector， 
&lt;script type=&quot;math/tex&quot;&gt;\exp (w \cdot \phi(x, y))&lt;/script&gt;
  是正数（可能会大于 1，这和概率 [0, 1] 的约束有冲突）&lt;/p&gt;

&lt;p&gt;我们关心的得是 
&lt;script type=&quot;math/tex&quot;&gt;P(y | x)&lt;/script&gt;
 ，有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(y | x)=\frac{P(x, y)}{\sum_{y^{\prime}} P\left(x, y^{\prime}\right)}&lt;/script&gt;

&lt;p&gt;因为 
&lt;script type=&quot;math/tex&quot;&gt;P(x, y)&lt;/script&gt;
 可以写作：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{P}(x, y)=\frac{\exp (w \cdot \phi(x, y))}{R}&lt;/script&gt;

&lt;p&gt;则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(y | x) = \frac{\exp (w \cdot \phi(x, y))}{\sum_{y^{\prime} \in \mathbb{Y}} \exp \left(w \cdot \phi\left(x, y^{\prime}\right)\right)}=\frac{\exp (w \cdot \phi(x, y))}{Z(x)}&lt;/script&gt;

&lt;h3 id=&quot;和-hmm-的关系&quot;&gt;和 HMM 的关系&lt;/h3&gt;

&lt;p&gt;在 HMM 中：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(x, y)=P\left(y_{1} | s t a r t\right) \prod_{l=1}^{L-1} P\left(y_{l+1} | y_{l}\right) P\left(e n d | y_{L}\right) \prod_{l=1}^{L} P\left(x_{l} | y_{l}\right)&lt;/script&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\log P(x, y)} \\ \\
{=\log P\left(y_{1} | s t a r t\right)+\sum_{l=1}^{L-1} \log P\left(y_{l+1} | y_{l}\right)+\log P\left(e n d | y_{L}\right)} \\ \\ 
{+\sum_{l=1}^{L} \log P\left(x_{l} | y_{l}\right)}\end{array}&lt;/script&gt;

&lt;p&gt;转换一下最后一项：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{l=1}^{L} \log P\left(x_{l} | y_{l}\right)=\sum_{s, t} \log P(t | s) \times N_{s, t}(x, y)&lt;/script&gt;

&lt;p&gt;其中，s 为 tag，t 为 word， 
&lt;script type=&quot;math/tex&quot;&gt;N_{s, t}(x, y)&lt;/script&gt;
 为 s 和 t  在 (x, y) 中一起出现的计数。&lt;/p&gt;

&lt;p&gt;举个例子：我们有以下 
&lt;script type=&quot;math/tex&quot;&gt;(x, y)&lt;/script&gt;
：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gts7bz0aj30li0683yk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{c}{N_{D, t h e}(x, y)=2} \\ {N_{N, d o g}(x, y)=1} \\ {N_{V, a t e}(x, y)=1} \\ {N_{N, h o m e w o r k}(x, y)=1} \\ {N_{s, t}(x, y)=0} \\ \text{(for any other s and t)}\end{array}&lt;/script&gt;

&lt;p&gt;则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}
{\sum_{l=1}^{L} \log P\left(x_{l} | y_{l}\right)} \\ \\
{\quad=\log P(\operatorname{the} | D)+\log P(d o g | N)+\log P(\text {ate} | V)} \\ \\
{\quad \quad+\log P(\text {the} | D)+\log P(\text {homework} | N)} \\ \\
{\quad=\log P(\text {the} | D) \times 2+\log P(\operatorname{dog} | N) \times 1+\log P(a t e | V) \times 1} \\ \\
{\quad \quad+\log P(\text {homework} | N) \times 1} \\ \\
{\quad=\sum_{s, t} \log P(t | s) \times N_{s, t}(x, y)} \\ \\
\end{array}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\log P\left(y_{1} | s t a r t\right)=\sum_{s} \log P(s | \text {start}) \times N_{\text {start}, s}(x, y)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{l=1}^{L-1} \log P\left(y_{l+1} | y_{l}\right)=\sum_{s, s^{\prime}} \log P\left(s^{\prime} | s\right) \times N_{s, s^{\prime}}(x, y)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\log P\left(e n d | y_{L}\right)=\sum_{s} \log P(e n d | s) \times N_{s, e n d}(x, y)&lt;/script&gt;

&lt;p&gt;则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\log P(x, y)} \\ \\ 
{=\sum_{s, t} \log P(t | s) \times N_{s, t}(x, y)} \\\\ 
{+\sum_{s} \log P(s | \text {start}) \times N_{\text {start}, s}(x, y)} \\\\ 
{+\sum_{s, s^{\prime}} \log P\left(s^{\prime} | s\right) \times N_{s, S^{\prime}}(x, y)} \\ \\ 
{+\sum_{s} \log P(e n d | s) \times N_{s, e n d}(x, y)} \\\\ 
{= \left[ \begin{array}{c}{\vdots} \\ {\log P(t | s)} \\ {\vdots} \\ {\log P(s | s t a r t)} \\ {\vdots} \\ {\log P\left(s^{\prime} | s\right)} \\ {\vdots}  \\ {\log P(\text {end} | s)} \\ {\vdots}\end{array}\right]   \cdot \left[ \begin{array}{c}{\vdots} \\ {N_{s, t}(x, y)} \\ {\vdots} \\ {N_{start, s}(x, y)} \\ {\vdots} \\ {N_{s, s^{\prime}}(x, y)} \\ {\vdots} \\ {N_{s, end}(x, y)}  \\ {\vdots}\end{array}\right]} \\\\ 
{=w \cdot \phi(x, y)} 
\end{array}&lt;/script&gt;

&lt;p&gt;故有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{P}(x, y)=\exp (w \cdot \phi(x, y))&lt;/script&gt;

&lt;h3 id=&quot;feature-vector&quot;&gt;Feature Vector&lt;/h3&gt;

&lt;h3 id=&quot;training-criterion&quot;&gt;Training Criterion&lt;/h3&gt;

&lt;h3 id=&quot;crf-vs-hmm&quot;&gt;CRF v.s. HMM&lt;/h3&gt;

&lt;h2 id=&quot;structured-perceptronsvm&quot;&gt;Structured Perceptron/SVM&lt;/h2&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;[1].  &lt;a href=&quot;https://www.youtube.com/watch?v=o9FPSqobMys&amp;amp;list=PLJV_el3uVTsNHQKxv49vpq7NSn-zim18V&amp;amp;index=4&quot;&gt;台灣大學 李宏毅 《Structured Learning 4: Sequence Labeling》&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 27 May 2019 14:50:01 +0800</pubDate>
        <link>http://localhost:4000/2019/05/struc-04/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/struc-04/</guid>
        
        
      </item>
    
      <item>
        <title>结构化学习（3）：结构化 SVM</title>
        <description>&lt;p&gt;上一篇文章 &lt;a href=&quot;https://caotouchan.github.io/2019/05/struc-02/&quot;&gt;《结构化学习（2）：结构化线性模型》&lt;/a&gt; 提出一个线性模型来解决结构化学习。&lt;/p&gt;

&lt;p&gt;对于&lt;strong&gt;问题一&lt;/strong&gt;（定义 $F(x,y)$），在这个模型中，我们预设 $F(x, y)$ 是 linear 的，其中加入了很多人工的特征。但是 &lt;strong&gt;如果 $F(x,y)$不是线性的呢 ？ 如果我们不想要做这么多人工特征工程呢 ？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于&lt;strong&gt;问题二&lt;/strong&gt; (解决 arg max 问题)，我们&lt;strong&gt;穷举&lt;/strong&gt;所有可能得 $y$。我们是否能找到一些方法简化这个问题？ 事实上，在不同问题上，我们可能会有不同的方法来应对这个问题。比如 ——&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Object Detection : Branch and Bound algorithm 、Selective Search&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sequence Labeling : Viterbi Algorithm&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用什么算法来应对这个问题，取决于 $\phi(x,y)$。如果不知道如何解这个 QP，也可以使用 &lt;strong&gt;Genetic Algorithm&lt;/strong&gt; 来尝试解决。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OPEN QUESTION: 如果 Inference 阶段无法得到一个确切的结果呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于 &lt;strong&gt;问题 3&lt;/strong&gt; ，我们的目标是给定数据找到 $F(x,y)$）。下文将讲解这个问题。&lt;/p&gt;

&lt;h2 id=&quot;线性可分-structured-perceptron&quot;&gt;线性可分 （Structured Perceptron）&lt;/h2&gt;

&lt;h3 id=&quot;算法描述&quot;&gt;算法描述&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.caotouchan.tech/2019/05/25/%E7%BB%93%E6%9E%84%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89%EF%BC%9A%E7%BB%93%E6%9E%84%E5%8C%96%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/&quot;&gt;上一篇文章&lt;/a&gt; 中，我们对提出的线性模型的解决方案描述如下：&lt;/p&gt;

&lt;p&gt;对于输入：
&lt;script type=&quot;math/tex&quot;&gt;\text { Input: training data set }\left\{\left(x^{1}, \hat{y}^{1}\right)\left(x^{2}, \hat{y}^{2}\right) \ldots,\left(x^{r}, \hat{y}^{r}\right) \ldots\right\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;我们的输出是：
&lt;script type=&quot;math/tex&quot;&gt;\text { Output: weight vector w }&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;算法如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ 初始化 \space w = 0$&lt;/p&gt;

  &lt;p&gt;$do : $&lt;/p&gt;

  &lt;p&gt;$\space \space 对于每个训练样本对\space \left(x^{r}, \hat{y}^{r}\right) $&lt;/p&gt;

  &lt;p&gt;$\space \space \space \space 找到标签\space \tilde{y}^{r} \space 以最大化 \space w \cdot \phi\left(x^{r}, y\right) ：$&lt;/p&gt;

  &lt;p&gt;$\space \space \space \space\space \space \space \space \widetilde{y}^{r}=\arg \max _{y \in Y} w \cdot \phi\left(x^{r}, y\right)(\text { 问题 2 } )$&lt;/p&gt;

  &lt;p&gt;$ \space \space \space \space \text { 如果 } \tilde{y}^{r} \neq \hat{y}^{r}, \text { 更新 } \mathbf{w} ： $&lt;/p&gt;

  &lt;p&gt;$\space \space \space \space\space \space \space \space w \rightarrow w+\phi\left(x^{r}, \hat{y}^{r}\right)-\phi\left(x^{r}, \widetilde{y}^{r}\right) $&lt;/p&gt;

  &lt;p&gt;$ 直到 w 不再更新 \rightarrow 结束循环$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;收敛性及其证明&quot;&gt;收敛性及其证明&lt;/h3&gt;

&lt;p&gt;这个算法是否会收敛？实际上，它是否收敛和 $y$ 的空间没有关系：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在线性可分的案例中，只需要更新最多 $(R / \delta)^{2}$ 次，就能找到 $\widehat{W}$ 。
其中，$\delta$ 是间隔（ margin ），$R$ 是 $\phi(x, y)$ 和 $\phi\left(x, y^{\prime}\right)$ 之间的最大距离&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;证明如下。&lt;/p&gt;

&lt;p&gt;算法的更新公式是：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w^{k}=w^{k-1}+\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, \widetilde{y}^{n}\right)&lt;/script&gt;

&lt;p&gt;设$\delta$ 是间隔（ margin ），$R$ 是 $\phi(x, y)$ 和 $\phi\left(x, y^{\prime}\right)$ 之间的最大距离，$\rho_{\mathrm{k}} $ 是 $\hat{\boldsymbol{w}} $ 和 $\mathbf{w}^{\mathbf{k}}$ 之间的夹角，则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\cos \rho_{k}=\frac{\hat{w}}{\|\hat{w}\|} \cdot \frac{w^{k}}{\left\|w^{k}\right\|}&lt;/script&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{w} \cdot w^{k}=\hat{w} \cdot\left(w^{k-1}+\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, \widetilde{y}^{n}\right)\right)&lt;/script&gt;

&lt;p&gt;即：
&lt;script type=&quot;math/tex&quot;&gt;\hat{w} \cdot w^{k}= \hat{w} \cdot w^{k-1}+\hat{w} \cdot \phi\left(x^{n}, \hat{y}^{n}\right)-\hat{w} \cdot \phi\left(x^{n}, \tilde{y}^{n}\right)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;所以：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{w} \cdot w^{k} \geq \hat{w} \cdot w^{k-1}+\delta&lt;/script&gt;

&lt;p&gt;也就是：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\hat{w} \cdot w^{1} \geq \hat{w} \cdot w^{0}+\delta} \\ {\hat{w} \cdot w^{1} \geq \delta}\end{array}

\begin{array}{l}{\hat{w} \cdot w^{2} \geq \hat{w} \cdot w^{1}+\delta} \\ {\hat{w} \cdot w^{2} \geq 2 \delta}\end{array}

\begin{array}{l}{...} \\ {...}\end{array}&lt;/script&gt;

&lt;p&gt;所以可以得到：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{w} \cdot w^{k} \geq k \delta&lt;/script&gt;

&lt;p&gt;也就是 $\hat{w}$ 和 $w^{k}$ 的内积在增加。&lt;/p&gt;

&lt;p&gt;不是一般性的，有：$|\widehat{W}|=1$ （ $\hat{w} \cdot \phi\left(x^{n}, \hat{y}^{n}\right) \geq \hat{w} \cdot \phi\left(x^{n}, y\right)+\delta$ 进行正则）&lt;/p&gt;

&lt;p&gt;如果我们能&lt;strong&gt;证明 ${\left|w^{k}\right|}$ 增加不那么快&lt;/strong&gt;，那么相当于知道 $\hat{w}$ 和 $w^{k}$  两者的距离逐渐接近 —— 越来越收敛。&lt;/p&gt;

&lt;p&gt;由 ：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w^{k}=w^{k-1}+\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, \widetilde{y}^{n}\right)&lt;/script&gt;

&lt;p&gt;有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\left\|w^{k}\right\|^{2}=\| w^{k-1}+\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left.\left(x^{n}, \widetilde{y}^{n}\right)\right|^{2}} \\ {=\left\|w^{k-1}\right\|^{2}+\| \phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left.\left(x^{n}, \widetilde{y}^{n}\right)\right|^{2}+2 w^{k-1} \cdot\left(\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, \widetilde{y}^{n}\right)\right)}\end{array}&lt;/script&gt;

&lt;p&gt;因为更新过程是做 $arg \space max$ 操作，然后纠正方向，故&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w^{k-1} \cdot\left(\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, \widetilde{y}^{n}\right)\right) \lt 0&lt;/script&gt;

&lt;p&gt;而&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\| \phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left.\left(x^{n}, \widetilde{y}^{n}\right)\right|^{2} \gt 0&lt;/script&gt;

&lt;p&gt;由上可知：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\|w^{k}\right\|^{2} \leq\left\|\boldsymbol{w}^{k-1}\right\|^{2}+\mathbf{R}^{2}&lt;/script&gt;

&lt;p&gt;所以可以得到 $\left|w^{k}\right|^{2} $ 的 upper bound：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\left\|w^{1}\right\|^{2} \leq\left\|w^{0}\right\|^{2}+\mathrm{R}^{2}=\mathrm{R}^{2}} \\
{\left\|w^{2}\right\|^{2} \leq\left\|w^{1}\right\|^{2}+\mathrm{R}^{2} \leq 2 \mathrm{R}^{2}} \\
... \\
{\left\|w^{k}\right\|^{2} \leq k \mathrm{R}^{2}}\end{array}&lt;/script&gt;

&lt;p&gt;到此，我们有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} \cos \rho_{k}=&amp; \frac{\hat{w}}{\|\hat{w}\|} \cdot \frac{w^{k}}{\left\|w^{k}\right\|} \\ &amp; \geq \frac{k \delta}{\sqrt{k R^{2}}}=\sqrt{k} \frac{\delta}{R} \end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gsyl1p5ej30qy0m0q4k.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\sqrt{k} \frac{\delta}{R} \leq 1} \\ {k \leq\left(\frac{R}{\delta}\right)^{2}}\end{array}&lt;/script&gt;

&lt;p&gt;到此，收敛性得以证明。&lt;/p&gt;

&lt;h2 id=&quot;非线性可分&quot;&gt;非线性可分&lt;/h2&gt;

&lt;p&gt;当数据非线性可分的时候，有些 weight vector 也会比其他的 weight vectors 好，如下图，$W^{\prime}$ 好于 $W^{\prime \prime}$：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4gszdjr6tj30tw0go0tk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;定义代价函数&quot;&gt;定义代价函数&lt;/h3&gt;

&lt;p&gt;定义代价函数 $C$ 来衡量 $w$ 有多差，然后选择 $w$ 来最小化 $C$ 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt0k4iyij31000giwfk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PS : 选择最大间距那个（$\max _{y}\left[w \cdot \phi\left(x^{n}, y\right)\right]$） 而不是前三个之和、前十个和的均值或者其他，是因为我们（假设）问题二的 $arg \space max$ 已经被解决。如果使用其他来进行计算，实际上是复杂化了这个问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;随机梯度下降求解&quot;&gt;随机梯度下降求解&lt;/h3&gt;

&lt;p&gt;那么如何求解梯度 $\nabla C^{n}$ 呢 ？&lt;/p&gt;

&lt;p&gt;考虑公式 $C^{n}=\max _{y}\left[w \cdot \phi\left(x^{n}, y\right)\right]-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)$ 中 $\max _{y}\left[w \cdot \phi\left(x^{n}, y\right)\right]$ ，$y$ 会随着 $w$ 的不同而变化。&lt;/p&gt;

&lt;p&gt;假设下图是 $w$ 的空间，$\operatorname{argmax}_{y}\left[w \cdot \phi\left(x^{n}, y\right)\right]$ 在不同的$w$ 下对应不同的 $y$ ($y^{\prime}、y^{\prime\prime}、y^{\prime\prime\prime} … $)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gt0y8e61j30uw0j6wev.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是在各自的 region 中，$\operatorname{argmax}_{y}\left[w \cdot \phi\left(x^{n}, y\right)\right] = y^{\prime} 、y^{\prime\prime}、y^{\prime\prime\prime} … $。&lt;/p&gt;

&lt;p&gt;我们知道，$y^{\prime} = w \cdot \phi\left(x^{n}, y^{\prime}\right) -w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)$，故 $\nabla C^{n} =\phi\left(x^{n}, y^{\prime}\right) -\phi\left(x^{n}, \hat{y}^{n}\right)$。$y^{\prime\prime}、y^{\prime\prime\prime} …$ 类似。也就是，在避开边界的地方，实际都是可微的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt19k5ivj30y60jmdhh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以，更新算法为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt1jc0hzj30y60jw407.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;衡量错误-修改代价函数&quot;&gt;衡量错误 （修改代价函数）&lt;/h2&gt;

&lt;p&gt;上文中我们把所有的错误视为一样的代价。但实际上不同的错误，可能有的错的少，有的错的多。所以，实际上把错误进行量化会更好。&lt;/p&gt;

&lt;h3 id=&quot;加入-margin&quot;&gt;加入 margin&lt;/h3&gt;

&lt;p&gt;这种衡量的标准在不同的 case 会有所差异。考虑下边的 case：&lt;/p&gt;

&lt;p&gt;定义 $\Delta(\hat{y}, y) : \hat{y} \text { 和 } y \text { 之间的不同 } (&amp;gt;0) $&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt1ub0obj30z40g8wg1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改下代价函数为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C^{n}=\max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]-w \cdot \phi\left(x^{n}, \widehat{y}^{n}\right)&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt24pf29j30qw0hiwfb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在之前的算法中，我们在每一次迭代里选择训练数据 $ {x^{n}, \hat{y}^{n}} $：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\tilde{y}^{n}=\max _{y}\left[w \cdot \phi\left(x^{n}, y\right)\right]} \\ \\
{\nabla C^{n}(w)=\phi\left(x^{n}, \tilde{y}^{n}\right)-\phi\left(x^{n}, \hat{y}^{n}\right)} \\ \\
{w \rightarrow w-\eta\left[\phi\left(x^{n}, \tilde{y}^{n}\right)-\phi\left(x^{n}, \hat{y}^{n}\right)\right]}\end{array}&lt;/script&gt;

&lt;p&gt;一句上述思想修改下：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\overline{y}^{n}=\arg \max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]} \\ \\
{\nabla C^{n}(w)=\phi\left(x^{n}, \overline{y}^{n}\right)-\phi\left(x^{n}, \hat{y}^{n}\right)} \\ \\
{w \rightarrow w-\eta\left[\phi\left(x^{n}, \overline{y}^{n}\right)-\phi\left(x^{n}, \hat{y}^{n}\right)\right]}\end{array}&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;上述方法实际上引入了一个新的问题 ： $\Delta\left(\hat{y}^{n}, y\right)$ 。所以设计 $\Delta$ 函数的时候需要考虑是否会使得问题更加复杂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;另一个视角&quot;&gt;另一个视角&lt;/h3&gt;

&lt;p&gt;最小化代价函数实际上（有可能）等于最小化训练集错误的 upper bound：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C^{\prime}=\sum_{n=1}^{N} \Delta\left(\hat{y}^{n}, \tilde{y}^{n}\right) \leq C=\sum_{n=1}^{N} C^{n}&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;证明&lt;/strong&gt; ：$\Delta\left(\hat{y}^{n}, \tilde{y}^{n}\right) \leq C^{n}$&lt;/p&gt;

  &lt;p&gt;首先，$C^{n}=\max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)$
由 $\tilde{y}^{n}=\arg \max _{y} w \cdot \phi\left(x^{n}, y\right)$ 知：$\left[w \cdot \phi\left(x^{n}, \tilde{y}^{n}\right)-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)\right] \geq 0$
所以：
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{aligned} 
\Delta\left(\hat{y}^{n}, \tilde{y}^{n}\right) 
&amp;\leq \Delta\left(\hat{y}^{n}, \tilde{y}^{n}\right)+\left[w \cdot \phi\left(x^{n}, \tilde{y}^{n}\right)-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)\right] \\ 
&amp;=\left[\Delta\left(\hat{y}^{n}, \tilde{y}^{n}\right)+w \cdot \varphi\left(x^{n}, \tilde{y}^{n}\right)\right]-w \cdot \varphi\left(x^{n}, \hat{y}^{n}\right)\\ 
&amp; \leq \max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \varphi\left(x^{n}, y\right)\right]-w \cdot \varphi\left(x^{n}, \hat{y}^{n}\right)\\ 
&amp;=C^{n} \end{aligned} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;其他代价函数&quot;&gt;其他代价函数&lt;/h3&gt;

&lt;p&gt;要使得 $\Delta\left(\hat{y}^{n}, \tilde{y}^{n}\right) \leq C^{n}$，也可以选择其他代价函数，比如：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\frac{\text {Margin rescaling:}}{C^{n}=\max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)}} \\ \\ {\frac{\text {Slack variable rescaling:}}{C^{n}=\max _{\Delta} \Delta\left(\hat{y}^{n}, y\right)\left[1+w \cdot \phi\left(x^{n}, y\right)-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)\right]}}\end{array}&lt;/script&gt;

&lt;h2 id=&quot;正则化&quot;&gt;正则化&lt;/h2&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C=\sum_{n=1}^{N} C^{n} \quad \longrightarrow \quad C=\frac{1}{2}\|w\|^{2}+\lambda \sum_{n=1}^{N} C^{n}&lt;/script&gt;

&lt;p&gt;其中，$C^{n}=\max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]-w \cdot \phi\left(x^{n}, \widehat{y}^{n}\right)$。&lt;/p&gt;

&lt;p&gt;每一轮迭代，选择训练数据 ${x^{n}, \hat{y}^{n}}$：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\overline{y}^{n}=\operatorname{argmax}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]} \\ \\
{\nabla C^{n}=\phi\left(x^{n}, \overline{y}^{n}\right)-\phi\left(x^{n}, \hat{y}^{n}\right)+w} \\ \\
{w \rightarrow w-\eta\left[\phi\left(x^{n}, \overline{y}^{n}\right)-\phi\left(x^{n}, \hat{y}^{n}\right)\right]-\eta w} \\ \\
{\quad=(1-\eta) w-\eta\left[\phi\left(x^{n}, \overline{y}^{n}\right)-\phi\left(x^{n}, \hat{y}^{n}\right)\right]}\end{array}&lt;/script&gt;

&lt;h2 id=&quot;结构化-svm--structured-svm-&quot;&gt;结构化 SVM （ Structured SVM ）&lt;/h2&gt;

&lt;h3 id=&quot;目标&quot;&gt;目标&lt;/h3&gt;

&lt;p&gt;由之前的工作，得到：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} \text { Find } &amp; \text { minimizing } C \\ C &amp;=\frac{1}{2}\|w\|^{2}+\lambda \sum_{n=1}^{N} C^{n} \\ C^{n} &amp;=\max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right) \end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C^{n}+w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)=\max _{y}\left[\Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)\right]&lt;/script&gt;

&lt;p&gt;因为目标是最小化 $C$，故其等价于：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\text { For } \forall y :} \\ \\
{\quad C^{n}+w \cdot \phi\left(x^{n}, \hat{y}^{n}\right) \geq \Delta\left(\hat{y}^{n}, y\right)+w \cdot \phi\left(x^{n}, y\right)} \\ \\
{\quad w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)-w \cdot \phi\left(x^{n}, y\right) \geq \Delta\left(\hat{y}^{n}, y\right)-C^{n}}\end{array}&lt;/script&gt;

&lt;p&gt;也就是，最小化的目标描述等价于：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\text { Find } w, \varepsilon^{1}, \cdots, \varepsilon^{N} \text { minimizing } C} \\ \\ 
{\quad C=\frac{1}{2}\|w\|^{2}+\lambda \sum_{n=1}^{N} \varepsilon^{n}} \\ \\
 {\text { For } \forall n :} \\ \\
{\quad \text { For } \forall y :} \\ \\
 {\quad \quad w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)-w \cdot \phi\left(x^{n}, y\right) \geq \Delta\left(\hat{y}^{n}, y\right)-\varepsilon^{n}}\end{array}&lt;/script&gt;

&lt;p&gt;其中的 $\varepsilon^{n}$ 称为松弛变量（ slack variable ）。&lt;/p&gt;

&lt;p&gt;因为 $\mathrm{y}=\hat{y}^{n}$ 时，有 $w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)-w \cdot \phi\left(x^{n}, \hat{y}^{n}\right) \geq \Delta\left(\hat{y}^{n}, \hat{y}^{n}\right)-\varepsilon^{n}$，故： $\varepsilon^{n} \geq 0$。所以，原来的目标转化为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\text { Find } w, \varepsilon^{1}, \cdots, \varepsilon^{N} \text { minimizing } C} \\ \\ 
{\quad C=\frac{1}{2}\|w\|^{2}+\lambda \sum_{n=1}^{N} \varepsilon^{n}} \\ \\
 {\text { For } \forall n :} \\ \\
{\quad \text { For } \forall y \neq \hat{y}^{n} :} \\ \\
 {\quad \quad w \cdot\left(\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, y\right)\right) \geq \Delta\left(\hat{y}^{n}, y\right)-\varepsilon^{n}, \varepsilon^{n} \geq 0}\end{array}&lt;/script&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;

&lt;p&gt;举个直观的例子来解释下这个目标。考虑下图目标检测的例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gt2hulekj30hk0ahjrr.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们需要每个正确的方框和错误的方框之间的距离 满足：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4gt2vsjfcj30oz06o3z0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是可能并没有一个 $w$ 会满足这样的条件，所以加入松弛因子来放宽这个限制：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gt33pjfbj30pp06egm5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，我们希望 $\varepsilon$ 的值越小越好。&lt;/p&gt;

&lt;h3 id=&quot;求解&quot;&gt;求解&lt;/h3&gt;

&lt;p&gt;由上文可以得到目标是：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\text { Find } w, \varepsilon^{1}, \cdots, \varepsilon^{N} \text { minimizing } C} \\ \\ 
{\quad C=\frac{1}{2}\|w\|^{2}+\lambda \sum_{n=1}^{N} \varepsilon^{n}} \\ \\
 {\text { For } \forall n :} \\ \\
{\quad \text { For } \forall y \neq \hat{y}^{n} :} \\ \\
 {\quad \quad w \cdot\left(\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, y\right)\right) \geq \Delta\left(\hat{y}^{n}, y\right)-\varepsilon^{n}, \varepsilon^{n} \geq 0}\end{array}&lt;/script&gt;

&lt;p&gt;这是一个 Quadratic Programming (QP) Problem，可以使用各种 QP Problem Solver 来求解，比如 SVM package 的 Solver。但是上述公式中，约束很多，需要寻找一种办法来求解这个问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gt3deqb2j30qi0ja40h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结构化-svm-中的切面算法-cutting-plane-algorithm-&quot;&gt;结构化 SVM 中的切面算法（ Cutting Plane Algorithm ）&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gt3nesiij30bb09zq33.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;图：Depiction of the learning QP and approximated feasibility region &lt;a href=&quot;http://abnerguzman.com/publications/gkb_aistats13.pdf&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如上图，解空间约束在一个 “ 平面 ” 内，这个平面带着很多约束。我们将其抽象为下图 $\left(w, \varepsilon^{1}, \ldots, \varepsilon^{N}\right)$ 组成的参数空间。（简化为二维）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4gt3yxzmbj30ci0cggme.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在不带约束的情况下，最优解容易求得在右下角的蓝点处。但是因为约束（图中各种直线），使得难以求得最优解。&lt;/p&gt;

&lt;p&gt;假设约束下可选参数范围限制在图中间的钻石形状区域。可以看出，大部分约束是无关紧要的（比如图中的绿色线）。所以，如果我们能将 $y$ 限制带一个小集合 $A^{n}$ （称作 Working Set）中，那么将会大大简化求解过程。&lt;/p&gt;

&lt;p&gt;找到 $A^{n}$ 的过程如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4gt47gu6sj30oe0eet9z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由上可知，找 $A^{n}$ 的主要思路就是每次找到一些元素加入到 $A^{n}$ 中。首先，初始化 $\mathbb{A}^{1} \ldots \mathbb{A}^{N}$，当 $y$ 限制在一个小集合 $\mathbb{A}^{n} $ 时，就可以当做一个 QP Problem 来求解了。然后，我们求得 $w$ ，将新成员加入 $\mathbb{A}^{n} $，然后循环求解。&lt;/p&gt;

&lt;p&gt;以下图解这个过程。&lt;/p&gt;

&lt;p&gt;首先，初始化 $A^{n} = null$ （没有约束），然后求解这个 QP Problem，得到  $w$ 在蓝色星星处。&lt;/p&gt;

&lt;p&gt;然后，寻找没有满足的约束（图中红色线），从中挑选出 the most violated one （下文讲解如何找出）—— 假设是 $\mathrm{y}^{\prime}$ ，将它加入  $\mathbb{A}^{n} $ ：
&lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
\mathrm{A}^{n}=\mathrm{A}^{n} \cup\left\{y^{\prime}\right\}
\end{equation}&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gt4gko3rj30b50a9wez.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重复这个过程，直到求的最优解 w3 处蓝色星星所在位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gt4oz0k6j30aj07vt95.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从当前 $A^{n}$ 给定 $\mathrm{w}^{\prime} $ 和 $ \varepsilon^{\prime}$， 如何找到 the most violated one 呢？&lt;/p&gt;

&lt;p&gt;由约束条件 $w \cdot(\phi(x, \hat{y})-\phi(x, y)) \geq \Delta(\hat{y}, y)-\varepsilon$ 可知，不满足于约束意味着 $w^{\prime} \cdot(\phi(x, \hat{y})-\phi(x, y))&amp;lt;\Delta(\hat{y}, y)-\varepsilon^{\prime}$，所以衡量 Violation 的程度为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta(\hat{y}, y)-\varepsilon^{\prime}-w^{\prime} \cdot(\phi(x, \hat{y})-\phi(x, y))&lt;/script&gt;

&lt;p&gt;因为 $\varepsilon^{\prime}$ 、$w^{\prime}$ 是 fixed 的，$\phi(x, \hat{y})$ 也不影响计算，上式等同于：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Delta(\hat{y}, y)+w^{\prime} \cdot \phi(x, y)&lt;/script&gt;

&lt;p&gt;所以，The most violated one 是：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\arg \max _{y}[\Delta(\hat{y}, y)+w \cdot \phi(x, y)]&lt;/script&gt;

&lt;p&gt;综上，利用切面算法求解的过程如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4gt4xqe0mj30na0ghjsh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中的 QP 为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt56pvd9j30m807wt93.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下图解这个过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4gt5hin68j30ob0i5gmg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gt5rtj1xj30pi0jftal.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt628neqj30od0j675s.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt6aiga5j30pl0jc765.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;多分类-svm&quot;&gt;多分类 SVM&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Problem 1: Evaluation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果有 K 个分类，那么就有 K 个 weight vectors &lt;script type=&quot;math/tex&quot;&gt;\left\{w^{1}, w^{2}, \cdots, w^{K}\right\}&lt;/script&gt;。那么有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{y \in\{1,2, \cdots, k, \cdots, K\}} \\ \\
{F(x, y)=w^{y} \cdot \vec{x}} \\ \\
{\vec{x} : \text { vector representation of x}}\end{array}&lt;/script&gt;

&lt;p&gt;表示成：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x, y)=w \cdot \phi(x, y)&lt;/script&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w=\left( \begin{array}{c}{w^{1}} \\ {w^{2}} \\ {\vdots} \\ {w^{k}} \\ {\vdots} \\ {w^{K}}\end{array}\right) 
\phi(x, y)=\left( \begin{array}{c}{0} \\ {0} \\ {\vdots} \\ {\vec{x}} \\ {\vdots} \\ {0}\end{array}\right)&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Problem 2: Inference&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{F(x, y)=w^{y} \cdot \vec{x}} \\ \\ 
{\hat{y}=\arg \max _{y \in\{1,2, \cdots, k, \cdots, K\}} F(x, y)} \\\\ 
{\quad=\arg \max _{y \in\{1,2, \cdots, k, k\}} w^{y} \cdot \vec{x}}\end{array}&lt;/script&gt;

&lt;p&gt;一般来说，分类都是比较少的，所以可以直接枚举。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Problem 3: Training&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由前边可知：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\text { Find } w, \varepsilon^{1}, \cdots, \varepsilon^{N} \text { minimizing } C} \\ \\ 
{\quad C=\frac{1}{2}\|w\|^{2}+\lambda \sum_{n=1}^{N} \varepsilon^{n}} \\ \\
 {\text { For } \forall n :} \\ \\
{\quad \text { For } \forall y \neq \hat{y}^{n} :} \\ \\
 {\quad \quad w \cdot\left(\phi\left(x^{n}, \hat{y}^{n}\right)-\phi\left(x^{n}, y\right)\right) \geq \Delta\left(\hat{y}^{n}, y\right)-\varepsilon^{n}, \varepsilon^{n} \geq 0}\end{array}&lt;/script&gt;

&lt;p&gt;因为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{w \cdot \phi\left(x^{n}, \hat{y}^{n}\right)=w^{\hat{y}^{n}} \cdot \vec{x}} \\ {w \cdot \phi\left(x^{n}, y\right)=w^{y} \cdot \vec{x}}\end{array}&lt;/script&gt;

&lt;p&gt;故调整为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{l}{\text { Find } w, \varepsilon^{1}, \cdots, \varepsilon^{N} \text { minimizing } C} \\ \\ 
{\quad C=\frac{1}{2}\|w\|^{2}+\lambda \sum_{n=1}^{N} \varepsilon^{n}} \\ \\
 {\text { For } \forall n :} \\ \\
{\quad \text { For } \forall y \neq \hat{y}^{n} :} \\ \\
 {\quad \quad \left(w^{\hat{y}^{n}}-w^{y}\right) \cdot \vec{x} \geq \Delta\left(\hat{y}^{n}, y\right)-\varepsilon^{n}, \varepsilon^{n} \geq 0}\end{array}&lt;/script&gt;

&lt;p&gt;因为 $\Delta\left(\hat{y}^{n}, y\right)$ 代表的只是 &lt;code class=&quot;highlighter-rouge&quot;&gt;N * ( K-1 )&lt;/code&gt; 个约束，所以可以自行定义一些约束，比如：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{c}{y \in\{d o g, c a t, b u s, c a r\}} \\ {\Delta\left(\hat{y}^{n}=\operatorname{dog}, y=c a t\right)=1} \\ {\Delta\left(\hat{y}^{n}=\operatorname{dog}, y=b u s\right)=100} \\ {\quad \text { (defined as your wish) }}\end{array}&lt;/script&gt;

&lt;h2 id=&quot;二分类-svm&quot;&gt;二分类 SVM&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt6kzolhj30p70e4dgj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;beyond-structured-svm&quot;&gt;Beyond Structured SVM&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用 DNN 生成特征&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt6ujrrxj30nm06v0st.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ref: Hao Tang, Chao-hong Meng, Lin-shan Lee, “An initial attempt for phoneme
recognition using Structured Support Vector Machine (SVM),” ICASSP, 2010
Shi-Xiong Zhang, Gales, M.J.F., “Structured SVMs for Automatic Speech
Recognition,” in Audio, Speech, and Language Processing, IEEE Transactions on,
vol.21, no.3, pp.544-555, March 2013&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;联合训练 SVM 和 DNN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4gt727ztuj30o2091aab.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ref: Shi-Xiong Zhang, Chaojun Liu, Kaisheng Yao, and Yifan Gong, “DEEP NEURAL SUPPORT VECTOR MACHINES FOR SPEECH RECOGNITION”, Interspeech 2015&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;使用结构化 SVM 代替 DNN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4gt7a2gflj30nx06omxb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ref: Yi-Hsiu Liao, Hung-yi Lee, Lin-shan Lee, “Towards Structured Deep Neural Network for Automatic Speech Recognition”, ASRU, 2015&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C=\frac{1}{2}\|\theta\|^{2}+\frac{1}{2}\left\|\theta^{\prime}\right\|^{2}+\lambda \sum_{n=1}^{N} C^{n}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C^{n}=\max _{v}\left[\Delta\left(\hat{y}^{n}, y\right)+F\left(x^{n}, y\right)\right]-F\left(x^{n}, \hat{y}^{n}\right)&lt;/script&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YjvGVVrCrhQ&amp;amp;list=PLJV_el3uVTsNHQKxv49vpq7NSn-zim18V&amp;amp;index=3&quot;&gt;台灣大學 李宏毅 《Structured Learning 3: Structured SVM》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 26 May 2019 12:50:01 +0800</pubDate>
        <link>http://localhost:4000/2019/05/struc-03/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/struc-03/</guid>
        
        
      </item>
    
      <item>
        <title>结构化学习（2）：结构化线性模型</title>
        <description>&lt;p&gt;上一篇文章 &lt;a href=&quot;https://caotouchan.github.io/2019/05/struc-01/&quot;&gt;《结构化学习（1）：介绍、统一框架》&lt;/a&gt; 的最后说到，对于 Unified Framework 我们需要解决三个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Problem 1: 评估 —— 定义 F(x,y)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Problem 2: 推断 —— 计算 “arg max”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Problem 3: 训练 —— 对于给定训练数据，找到 F(x,y)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;考虑问题 1 —— 如果 F(x, y) 是一个确定的形式，那么问题 3 将不再是一个问题。&lt;/p&gt;

&lt;p&gt;以下，我们使用一个结构化的线性模型来考虑这个问题。&lt;/p&gt;

&lt;h2 id=&quot;problem-1-评估--定义-fxy&quot;&gt;Problem 1: 评估 —— 定义 F(x,y)&lt;/h2&gt;

&lt;p&gt;对于每一对 $(x, y)$ ，我们使用一组特征来描述：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(x, y) \rightarrow  \begin{array}{c}{\phi_{1}(x, y)} \\ {\phi_{2}(x, y)} \\ {\phi_{3}(x, y)} \\ {\vdots}\end{array}&lt;/script&gt;

&lt;p&gt;则：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} \mathrm{F}(x, y) &amp;=w_{1} \cdot \phi_{1}(x, y) \\ &amp;+w_{2} \cdot \phi_{2}(x, y) \\ &amp;+w_{3} \cdot \phi_{3}(x, y) \ldots \end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;其中， $w_{1}, w_{2},…$ 从数据中学习得到。&lt;/p&gt;

&lt;p&gt;也就是：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{F}(x, y)=\left[ \begin{array}{c}{w_{1}} \\ {w_{2}} \\ {w_{3}} \\ {\vdots}\end{array}\right] \cdot \left[ \begin{array}{c}{\phi_{1}(x, y)} \\ {\phi_{2}(x, y)} \\ {\phi_{3}(x, y)} \\ {\vdots}\end{array}\right]&lt;/script&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{F}(x, y)=w \cdot \phi(x, y)&lt;/script&gt;

&lt;p&gt;举两个栗子来说明下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例子一 ： 目标检测&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;做一个无心小和尚的目标检测器，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4grsmkfeuj31380piab7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么我们可以定义：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\phi(x, y) = \left[ \begin{array}{c}{红色方框比例} \\ {绿色方框比例} \\ {绿色方框外比例} \\ {\vdots}\end{array}\right]&lt;/script&gt;

&lt;p&gt;但是上述方法的特征抽取并不实用，效果也很弱。比较 SOTA 的方式是使用 CNN 来抽取特征。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例子二 ： 概要提取&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4grt47jkuj30na0bu3zk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例子三 ： 检索&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4grtfsamej30nk0badgt.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem-2-推断--计算-arg-max&quot;&gt;Problem 2: 推断 —— 计算 “arg max”&lt;/h2&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{array}{c}{y=\arg \max _{y \in Y} \mathrm{F}(x, y)} \\ {\mathrm{F}(x, y)=w \cdot \phi(x, y) \Rightarrow y=\arg \max _{y \in Y} \mathrm{w} \cdot \phi(x, y)}\end{array}&lt;/script&gt;

&lt;p&gt;关于问题二，我们在后边详述。先行假设以上问题已经被解决，进入问题三。&lt;/p&gt;

&lt;h2 id=&quot;problem-3-训练--对于给定训练数据找到-fxy&quot;&gt;Problem 3: 训练 —— 对于给定训练数据，找到 F(x,y)&lt;/h2&gt;

&lt;p&gt;在 ${\mathrm{F}(x, y)=w \cdot \phi(x, y)}$ 中 ，对于训练数据&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\{\left(x^{1}, \hat{y}^{1}\right),\left(x^{2}, \hat{y}^{2}\right) \ldots,\left(x^{r}, \hat{y}^{r}\right), \ldots\right\}&lt;/script&gt;

&lt;p&gt;我们的目标是学习到 $w$ 使得：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\forall r \text { (所有训练样本) }&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\forall y \in Y-\left\{\hat{y}^{r}\right\} \text { (第 r 个样本的所有错误 label) }&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text { 有 ： } w \cdot \phi\left(x^{r}, \hat{y}^{r}\right)&gt;w \cdot \phi\left(x^{r}, y\right)&lt;/script&gt;

&lt;p&gt;举个栗子：我们要做一个目标检测，有以下样本：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;输入数据一&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4grtpvmhgj30eh084wev.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;输入数据二&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4grtyncmfj30d507f0ta.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上输入数据红框圈出对应为正确标记，蓝框为错误标记。那么我们可以得到一个红色标记 $\phi\left(x^{r}, \hat{y}^{r}\right)$ 和多个蓝色标记 $\phi\left(x^{r}, y\right)$ 组成的空间：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：上述两个图片中的方框和问题一中的方框不一样。问题一中的方框表示单个样本的特征，而上图中一个方框代表一个样本的 $y$ —— 也就是红色方框表示组成 $\phi\left(x^{r}, \hat{y}^{r}\right)$ 的 $\hat{y}^{r}$，而蓝色方框表示组成 $\phi\left(x^{r}, y\right)$ 的 $y$ （ 其中 $y \ne \hat{y}^{r}$ ）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4gru6rej3j30su0frdgo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的目标是找到 $w$ 使得：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;它和红色星星的 inner product 大于 它和蓝色星星的 inner product&lt;/li&gt;
  &lt;li&gt;它和红色圆点的 inner product 大于 它和蓝色圆点的 inner product&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以看出，上述的例子中蓝色标记可能会有成千上万，我们应该如何解决这个问题呢？&lt;/p&gt;

&lt;h2 id=&quot;问题三的解决方案&quot;&gt;问题三的解决方案&lt;/h2&gt;

&lt;h3 id=&quot;算法描述&quot;&gt;算法描述&lt;/h3&gt;
&lt;p&gt;实际上，对于问题三，只要红色 bounding box 对应的 $\phi\left(x^{r}, \hat{y}^{r}\right)$ 存在，就可以通过下述算法来解决。&lt;/p&gt;

&lt;p&gt;对于输入：
&lt;script type=&quot;math/tex&quot;&gt;\text { Input: training data set }\left\{\left(x^{1}, \hat{y}^{1}\right)\left(x^{2}, \hat{y}^{2}\right) \ldots,\left(x^{r}, \hat{y}^{r}\right) \ldots\right\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;我们的输出是：
&lt;script type=&quot;math/tex&quot;&gt;\text { Output: weight vector w }&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;算法如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;初始化 $\space w = 0$&lt;/p&gt;

  &lt;p&gt;do :&lt;/p&gt;

  &lt;p&gt;$\space \space 对于每个训练样本对 \space \left(x^{r}, \hat{y}^{r}\right) $&lt;/p&gt;

  &lt;p&gt;$\space \space \space \space 找到标签\space \tilde{y}^{r} \space 以最大化 \space w \cdot \phi\left(x^{r}, y\right) ：$&lt;/p&gt;

  &lt;p&gt;$\space \space \space \space\space \space \space \space \widetilde{y}^{r}=\arg \max _{y \in Y} w \cdot \phi\left(x^{r}, y\right)(\text { 问题 2 } )$&lt;/p&gt;

  &lt;p&gt;$ \space \space \space \space \text { 如果 } \tilde{y}^{r} \neq \hat{y}^{r}, \text { 更新 } \mathbf{w} ： $&lt;/p&gt;

  &lt;p&gt;$\space \space \space \space\space \space \space \space w \rightarrow w+\phi\left(x^{r}, \hat{y}^{r}\right)-\phi\left(x^{r}, \widetilde{y}^{r}\right) $&lt;/p&gt;

  &lt;p&gt;$ 直到 w 不再更新 \rightarrow 结束循环$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;举例&quot;&gt;举例&lt;/h3&gt;

&lt;p&gt;还是以上边例子来说明这个算法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4gruhbsy7j30su0frdgo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;步骤 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;初始化 $w = 0$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选取样本 $\left(x^{1}, \hat{y}^{1}\right)$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;遍历 y 使得：
&lt;script type=&quot;math/tex&quot;&gt;\tilde{y}^{1}=\arg \max _{y \in Y} w \cdot \phi\left(x^{1}, y\right)&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;w = 0&lt;/code&gt; ，所以结果恒等于 0，故随机选取一个点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;更新 w&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4gruszngwj30e005odg0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;步骤 2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;选取样本 
&lt;script type=&quot;math/tex&quot;&gt;\left(x^{2}, \hat{y}^{2}\right)&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如 步骤一 穷举 y ，使得&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\widetilde{y}^{2}=\arg \max _{y \in Y} w \cdot \phi\left(x^{2}, y\right)&lt;/script&gt;
如下图，在上一步中得到的 w 上，找到目标点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4grv29v2hj307s08u744.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;更新&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} \text { If } \tilde{y}^{2} &amp; \neq \hat{y}^{2}, \text { update } \mathbf{w} \\ &amp; w \rightarrow w+\phi\left(x^{2}, \hat{y}^{2}\right)-\phi\left(x^{2}, \widetilde{y}^{2}\right) \end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4grvb7vtnj306806rdfo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;步骤 3&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后重新遍历样本，发现不再更新，故结束循环。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4grvmah9ij30h30a6dfx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HfPw40JPays&amp;amp;list=PLJV_el3uVTsNHQKxv49vpq7NSn-zim18V&amp;amp;index=2&quot;&gt;台灣大學 李宏毅 《Structured Learning 2: Linear Model》 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 25 May 2019 19:50:01 +0800</pubDate>
        <link>http://localhost:4000/2019/05/struc-02/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/struc-02/</guid>
        
        
      </item>
    
  </channel>
</rss>
