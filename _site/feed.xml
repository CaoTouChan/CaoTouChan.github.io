<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈草头</title>
    <description>90 后 | 广东人 | 现居住于帝都 | 算法攻城狮</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 Jul 2019 15:02:27 +0800</pubDate>
    <lastBuildDate>Mon, 01 Jul 2019 15:02:27 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>笔记 - CS224U NLU 07 关系抽取</title>
        <description>&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;关系抽取实际上就是从自然语言文本中抽取出三元组，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(founders, SpaceX, Elon_Musk)&lt;/li&gt;
  &lt;li&gt;(has_spouse, Elon_Musk, Talulah_Riley)&lt;/li&gt;
  &lt;li&gt;(worked_at, Elon_Musk, Tesla_Motors)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;累计这些三元组构造的知识库 (knowledge base, KB) 可以作为 QA 系统之类的基础。但是构造 KB 是个费时且昂贵的工作，所以我们将会使用一些现成的 KB 来帮助我们完成这个任务。&lt;/p&gt;

&lt;h2 id=&quot;基于模板的方法hand-built-patterns&quot;&gt;基于模板的方法(Hand-built patterns)&lt;/h2&gt;

&lt;h3 id=&quot;基于触发词字符串&quot;&gt;&lt;strong&gt;基于触发词/字符串&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;举例来说，使用类似 “X is the founder of Y” 这样的模板，可以抽取出 IS-A 的关系，比如 “Elon Musk is the founder of SpaceX” 可以得到 &lt;code class=&quot;highlighter-rouge&quot;&gt;(founders, SpaceX, Elon_Musk)&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;可以使用诸如 Stanford CoreNLP 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;tokensRegex&lt;/code&gt; 这样的工具进行实现。&lt;/p&gt;

&lt;h3 id=&quot;基于依存句法&quot;&gt;&lt;strong&gt;基于依存句法&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;通常以动词为起点构建规则，对节点上的词性和边上的依存关系进行限定，流程为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;分词、词性标注、命名实体识别、依存句法分析等&lt;/li&gt;
  &lt;li&gt;根据依存句法树匹配规则，生成三元组&lt;/li&gt;
  &lt;li&gt;根据扩展规则扩展三元组&lt;/li&gt;
  &lt;li&gt;进一步对三元组实体和触发词进行关系抽取&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4k7qfhdbzj310q0lo0u9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片来源：&lt;a href=&quot;http://www.shuang0420.com/2018/09/15/%E7%9F%A5%E8%AF%86%E6%8A%BD%E5%8F%96-%E5%AE%9E%E4%BD%93%E5%8F%8A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/&quot;&gt;徐阿衡的博客&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优缺点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于模板的方法可以有高准确率，但是召回率会比较高，而且费时费力。&lt;/p&gt;

&lt;h2 id=&quot;监督学习supervised-machine-learning&quot;&gt;监督学习(supervised machine learning)&lt;/h2&gt;

&lt;h3 id=&quot;机器学习&quot;&gt;&lt;strong&gt;机器学习&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;为了提高效率，我们训练两个分类器，第一个分类器判断命名实体间是否有关系，若有则送到第二个分类器给实体分配关系类别，分类器可以选择 MaxEnt、Naive Bayes、SVM 等。&lt;/p&gt;

&lt;p&gt;特征的选择可以有多样，比如：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;轻量级 ：实体的特征，包括实体前后的词、实体类型、实体之间的距离等&lt;/li&gt;
  &lt;li&gt;中等量级 ：考虑 chunk，如 NP、VP、PP 这类短语&lt;/li&gt;
  &lt;li&gt;重量级 ：考虑实体间的依存关系、实体间树结构的距离、其他特定的结构信息等&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;深度学习pipeline-vs-joint-model&quot;&gt;&lt;strong&gt;深度学习（Pipeline vs Joint Model）&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;模型通常有 CNN/RNN + attention，损失函数 ranking loss 要优于 cross entropy。&lt;/p&gt;

&lt;p&gt;用到的特征通常有：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Position embeddings&lt;/li&gt;
  &lt;li&gt;Word embeddings&lt;/li&gt;
  &lt;li&gt;Knowledge embeddings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;分为两大类 Pipeline 和 Joint Model：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Pipeline&lt;/strong&gt; ： 把实体识别和关系分类作为两个完全 &lt;strong&gt;独立&lt;/strong&gt; 的过程&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;CR-CNN (&lt;a href=&quot;https://arxiv.org/pdf/1504.06580.pdf&quot;&gt;Santos et. al Computer Science 2015&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4k9ojhqv1j308e0epjrm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;word embedding + position embedding、6 个卷积核、max pooling 生成 sentence vector，与关系向量做点积求相似度。&lt;/p&gt;

&lt;p&gt;损失函数使用 &lt;strong&gt;pairwise ranking loss function&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\begin{aligned} L=&amp; \log \left(1+\exp \left(\gamma\left(m^{+}-s_{\theta}(x)_{y^{+}}\right)\right)\right.\\ &amp;+\log \left(1+\exp \left(\gamma\left(m^{-}+s_{\theta}(x)_{c^{-}}\right)\right)\right.\end{aligned}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;训练时每个样本有两个标签，正确标签 $y^+$ 和错误标签 $c^-$，$m^+$ 和 $m^-$ 对应了两个 margin，$\gamma$ 用来缩放。希望 &lt;script type=&quot;math/tex&quot;&gt;s_{\theta}(x)_{y^+}&lt;/script&gt; 越大越好，$s_{\theta}(x)_{c^-}$ 越小越好。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Att-CNN (&lt;a href=&quot;http://iiis.tsinghua.edu.cn/~weblt/papers/relation-classification.pdf&quot;&gt;Relation Classification via Multi-Level Attention CNNs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4k9uunlpgj30nu0gcdh9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用两层 Attention —— 一个是对两个实体的注意力，另一个是用 attention pooling 代替 max pooling （加强相关性强的词的权重）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Att-BLSTM （&lt;a href=&quot;http://www.aclweb.org/anthology/P16-2034&quot;&gt;Peng Zhou et. al ACL 2016&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BiLSTM + Attention 做关系分类任务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4k9zy9vn2j30vh0ekdgr.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;评测&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各方法在 SemEval-2010 Task 8 上的评测：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4ka1i7hyuj315u0ne0vs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Joint Model&lt;/strong&gt; ：实体识别和关系分类的过程 &lt;strong&gt;共同优化&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;LSTM-RNNs （&lt;a href=&quot;https://arxiv.org/pdf/1601.00770.pdf&quot;&gt;Miwa et. al ACL 2016&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实体识别和关系分类的参数共享，判断过程没有进行交互。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4ka58dl61j30s90e3q3r.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可以看出有三个表示层：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Embedding layer (word embeddings layer) ： 用到词向量、词性标签、依存句法标签、实体标签&lt;/p&gt;

  &lt;p&gt;Sequence layer (word sequence based LSTM-RNN layer)：负责实体识别。对两个方向的隐层单元拼接后进行实体识别（或序列标注）&lt;/p&gt;

  &lt;p&gt;Dependency layer (dependency subtree based LSTM-RNN layer )：负责关系分类。用 tree-structured BiLSTM-RNNs 来表示 relation candidate，捕捉了 top-down 和 bottom-up 双向的关系。主要是对 sequence layer 识别出的每个实体的最后一个单词进行排列组合，然后同样用两层 NN + softmax 对该组合进行分类。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;评测&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4kat7oqqoj30bj071t8z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;直觉上 pipeline 会传递误差，但是上图表明 Joint Model 未必起作用，但是评测结果表明外部知识可以对训练产生正面影响。&lt;/p&gt;

&lt;h2 id=&quot;半监督学习&quot;&gt;半监督学习&lt;/h2&gt;

&lt;p&gt;半监督学习是利用少量的标注信息进行学习，有基于 Bootstrap 的方法以及 &lt;a href=&quot;http://deepdive.stanford.edu/distant_supervision&quot;&gt;远程监督&lt;/a&gt; 方法。&lt;/p&gt;

&lt;h3 id=&quot;bootstrapping&quot;&gt;&lt;strong&gt;Bootstrapping&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;用少量实例作为初始种子(seed tuples)的集合，然后利用 pattern 学习方法进行学习，迭代抽取实例，然后从新实例中学习新 pattern 并扩充 pattern 集合，寻找和发现新的潜在关系三元组。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4kb9ab0ljj30sc0gzdhp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这方法对初始给定的种子集敏感，存在语义漂移问题，准确率较低，缺乏对每一个结果的置信度的计算。&lt;/p&gt;

&lt;h3 id=&quot;distant-supervision&quot;&gt;&lt;strong&gt;Distant supervision&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;把知识库与非结构化文本对齐来自动构建大量训练数据，减少模型对人工标注数据的依赖。先从知识库中抽取存在关系的实体对，然后从非结构化文本中抽取含有实体对的句子作为训练样本，提取特征训练分类器。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;APCNNs (PCNN + Sentence-level Attention) （&lt;a href=&quot;https://pdfs.semanticscholar.org/b8da/823ad81e3b8e5b80d82f86129fdb1d9132e7.pdf?_ga=2.214235987.519572625.1561962607-1203158446.1561962607&quot;&gt;Kang Liu et.al AI 2017&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4kbqekmqmj30sw0cygms.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PCNN : 分段池化以更加精准刻画不同上下文对句向量的贡献，参考 &lt;a href=&quot;http://www.emnlp2015.org/proceedings/EMNLP/pdf/EMNLP203.pdf&quot;&gt;Distant Supervision for Relation Extraction via Piecewise Convolutional Neural Networks&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;Sentence-level Attention : 句子层面的 attention 对 bag 里所有句子进行加权作为 bag 的特征向量，参考 &lt;a href=&quot;http://www.aclweb.org/anthology/P16-1200&quot;&gt;Neural Relation Extraction with Selective Attention over Instances&lt;/a&gt;。权重公式 ： &lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
\omega_{i}=\mathbf{W}_{a}^{\top}\left(\tanh \left[\boldsymbol{b}_{i} ; \boldsymbol{v}_{\text {relation}}\right]\right)+b_{a}
\end{equation}&lt;/script&gt;，这里对两个实体向量作差来表示关系向量 &lt;script type=&quot;math/tex&quot;&gt;v_{relation}&lt;/script&gt;，如果一个 instance 能表达这种关系，那么这个 instance 的向量表达应该和 &lt;script type=&quot;math/tex&quot;&gt;v_{relation}&lt;/script&gt; 高度相似，根据这个假设来计算句向量和关系向量的相关性。&lt;/li&gt;
  &lt;li&gt;Entity Descriptions : 引入实体背景知识 &lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
\mathcal{D}=\left\{\left(e_{i}, d_{i}\right)|i=1, \cdots,| \mathcal{D} |\right\}
\end{equation}&lt;/script&gt; （其中，&lt;script type=&quot;math/tex&quot;&gt;e_i&lt;/script&gt; 是实体表示，&lt;script type=&quot;math/tex&quot;&gt;d_i&lt;/script&gt; 是通过另一个传统 CNN 对收集到的实体的描述句抽特征得到），定义误差 &lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
\mathcal{L}_{e}=\sum_{i=1}^{|\mathcal{D}|}\left\|\boldsymbol{e}_{i}-\boldsymbol{d}_{i}\right\|_{2}^{2}
\end{equation}&lt;/script&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;训练过程是先训练不包含 Entity Descriptions 的 APCNNs 模型，目标函数是 &lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
\min \mathcal{L}_{A}=-\sum_{i=1}^{N} \log p\left(r_{i} | B_{i}, \theta\right)
\end{equation}&lt;/script&gt;。然后训练模型 APCNNs + D，目标函数是 &lt;script type=&quot;math/tex&quot;&gt;\begin{equation}
\min \mathcal{L}=\mathcal{L}_{A}+\lambda \mathcal{L}_{e}
\end{equation}&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;这种方法可以利用丰富的知识库信息，但因为其过强的假设导入引入大量噪声，也存在语义漂移，很难发现新的关系。&lt;/p&gt;

&lt;h2 id=&quot;无监督学习&quot;&gt;无监督学习&lt;/h2&gt;

&lt;h3 id=&quot;unsupervised-learning-from-the-web&quot;&gt;&lt;strong&gt;Unsupervised learning from the web&lt;/strong&gt;&lt;/h3&gt;

&lt;h2 id=&quot;参考资料和相关阅读&quot;&gt;参考资料和相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Stanford CS224U 课程主页 &lt;a href=&quot;http://web.stanford.edu/class/cs224u/&quot;&gt;http://web.stanford.edu/class/cs224u/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CS224U NLU（ 07 ）：关系抽取 视频 &lt;a href=&quot;https://youtu.be/pO3Jsr31s_Q&quot;&gt;https://youtu.be/pO3Jsr31s_Q&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jurafsky and Martin 2009, §22.1-22.2 &lt;a href=&quot;http://web.stanford.edu/class/cs224u/restricted/JM2009infoextract.pdf&quot;&gt;http://web.stanford.edu/class/cs224u/restricted/JM2009infoextract.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Snow et al. 2005 &lt;a href=&quot;http://ai.stanford.edu/~rion/papers/hypernym_nips05.pdf&quot;&gt;http://ai.stanford.edu/~rion/papers/hypernym_nips05.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mintz et al. 2009 &lt;a href=&quot;http://www.aclweb.org/anthology/P/P09/P09-1113.pdf&quot;&gt;http://www.aclweb.org/anthology/P/P09/P09-1113.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;徐啊衡 知识抽取-实体及关系抽取 &lt;a href=&quot;http://www.shuang0420.com/2018/09/15/%E7%9F%A5%E8%AF%86%E6%8A%BD%E5%8F%96-%E5%AE%9E%E4%BD%93%E5%8F%8A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/&quot;&gt;http://www.shuang0420.com/2018/09/15/知识抽取-实体及关系抽取&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 01 Jul 2019 08:02:11 +0800</pubDate>
        <link>http://localhost:4000/2019/07/cs224u-07-re/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/cs224u-07-re/</guid>
        
        <category>cs224u</category>
        
        <category>stanford</category>
        
        <category>关系抽取</category>
        
        <category>远程监督</category>
        
        
      </item>
    
      <item>
        <title>Kafka 知识总结与实战（01）消息引擎、分布式流处理平台、基本术语</title>
        <description>
</description>
        <pubDate>Sun, 30 Jun 2019 14:02:11 +0800</pubDate>
        <link>http://localhost:4000/2019/06/kafka-01-intro/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/kafka-01-intro/</guid>
        
        <category>消息引擎</category>
        
        <category>分布式流处理平台</category>
        
        <category>消息</category>
        
        <category>主题</category>
        
        <category>生产者</category>
        
        <category>消费者</category>
        
        <category>重平衡</category>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（06）分词器 Analyzer</title>
        <description>&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;分词器，就是讲文本转换成一系列单词的工具。&lt;/p&gt;

&lt;p&gt;分词器由三部分组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Character Filters ：针对原始文本，去除 HTML&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tokenizer ： 按照规则切分单词&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Token Filters ： 去除停用词、大小写改动之类&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4j6mqzjqzj30l706mdfv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;分类&quot;&gt;分类&lt;/h2&gt;

&lt;p&gt;ES 有内置的分词器，也可以自行定制分词器。其内置了多种分词器，比如 ：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple Analyzer – 按照非字母切分（符号被过滤），小写处理&lt;/li&gt;
  &lt;li&gt;Stop Analyzer – 小写处理，停用词过滤（the，a，is）&lt;/li&gt;
  &lt;li&gt;Whitespace Analyzer – 按照空格切分，不转小写&lt;/li&gt;
  &lt;li&gt;Keyword Analyzer – 不分词，直接将输入当作输出&lt;/li&gt;
  &lt;li&gt;Patter Analyzer – 正则表达式，默认 \W+ (非字符分隔)&lt;/li&gt;
  &lt;li&gt;Language – 提供了30多种常见语言的分词器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例代码如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;查看不同的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的效果&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;standard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;simple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;stop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;whitespace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;english&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;english&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2 running Quick brown-foxes leap over lazy dogs in the summer evening.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;icu_analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;他说的确实在理”&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;standard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;他说的确实在理”&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_analyze&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;icu_analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;这个苹果不大好吃&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料和相关阅读&quot;&gt;参考资料和相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch核心技术与实战 （极客时间 阮一鸣） &lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Anatomy of an analyzer &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 30 Jun 2019 13:30:11 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-analyzer/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-analyzer/</guid>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（05）倒排索引</title>
        <description>&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elasticsearch 使用一种称为 倒排索引 的结构，它适用于快速的全文搜索。一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如，对于搜索引擎而言，正排索引就是文档 id 到单词的关联，而倒排索引就是单词到文档 id 的关联。&lt;/p&gt;

&lt;p&gt;可以为 ES 的文档字段指定哪些不进行索引，这样做可以节省空间，但也意味着这个字段无法被搜索。&lt;/p&gt;

&lt;h2 id=&quot;核心组成&quot;&gt;核心组成&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4j674gktkj30n9067dfv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;倒排索引包含两部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;单词词典 （ Term Dictionary ）：记录单词以及单词到倒排列表的关系，一般采用 B+ 树或者哈希拉链法实现&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;倒排列表 （ Posting List ）：记录单词对应文档集合，由倒排索引项 （ Posting ） 组成 —— 文档 ID、词频 TF、位置 Position、位移 offset&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4j6bh8wsbj30n807vdfv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料和相关阅读&quot;&gt;参考资料和相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch核心技术与实战 （极客时间 阮一鸣） &lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;维基百科 - 倒排索引 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95&quot;&gt;https://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch: 权威指南 - 倒排索引 &lt;a href=&quot;https://www.elastic.co/guide/cn/elasticsearch/guide/current/inverted-index.html&quot;&gt;https://www.elastic.co/guide/cn/elasticsearch/guide/current/inverted-index.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 30 Jun 2019 13:02:11 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-inverted-index/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-inverted-index/</guid>
        
        <category>倒排索引</category>
        
        <category>全文搜索</category>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（04）CRUD 和批量操作</title>
        <description>&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ========== 创建文档 ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create document 自动生成 _id&lt;/span&gt;
POST &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-04-15T14:12:12&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Kibana&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create document 指定Id。如果id已经存在，报错&lt;/span&gt;
PUT &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1?op_type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;create
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-05-15T14:12:12&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Elasticsearch&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create document. 指定 ID 如果已经存在，就报错&lt;/span&gt;
PUT &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_create/1
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Jack&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-05-15T14:12:12&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Elasticsearch&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ======== 通过 ID 获取文档 =============&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Get the document by ID&lt;/span&gt;
GET &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1


&lt;span class=&quot;c&quot;&gt;# ===========  Index &amp;amp; Update ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Update 指定 ID  (先删除，在写入)&lt;/span&gt;
GET &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1

PUT &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;Mike&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# GET users/_doc/1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  在原文档上增加字段&lt;/span&gt;
POST &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_update/1/
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;post_date&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2019-05-15T14:12:12&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;trying out Elasticsearch&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;c&quot;&gt;# ======= 通过 ID 删除 ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 删除文档&lt;/span&gt;
DELETE &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;/_doc/1


&lt;span class=&quot;c&quot;&gt;# ========= Bulk 操作 ===========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 执行两次，查看每次的结果&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 执行第1次&lt;/span&gt;
POST _bulk
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;delete&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;update&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;field2&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 执行第2次&lt;/span&gt;
POST _bulk
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;delete&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field1&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;update&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;field2&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# =========== mget 操作 =============&lt;/span&gt;
GET /_mget
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# URI中指定index&lt;/span&gt;
GET /test/_mget
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


GET /_mget
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_source&quot;&lt;/span&gt; : &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_source&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;field3&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;field4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;_source&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;include&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
                &lt;span class=&quot;s2&quot;&gt;&quot;exclude&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user.location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ========== msearch 操作 ========&lt;/span&gt;
POST kibana_sample_data_ecommerce/_msearch
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;match_all&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;:1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;kibana_sample_data_flights&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;match_all&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;:2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# ============ 清除测试数据 =========&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 清除数据&lt;/span&gt;
DELETE &lt;span class=&quot;nb&quot;&gt;users
&lt;/span&gt;DELETE &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;DELETE test2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 27 Jun 2019 11:52:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-CRUD/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-CRUD/</guid>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（03）索引、文档、节点、分片</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4g145kf5dj30qk0dwgmo.jpg&quot; alt=&quot;基本概念&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，文档和分片、索引和节点，其实从开发和运维的两个不同视角下的产物。&lt;/p&gt;

&lt;p&gt;和 RDBMS 的相关概念做一个不太准确的类比：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RDBMS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Elasticsearch&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;table&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;index ( type )&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;row&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;document&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;column&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;field&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;schema&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;mapping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SQL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DSL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;文档&quot;&gt;文档&lt;/h2&gt;

&lt;p&gt;文档是 ES 中所有可搜索数据的 &lt;strong&gt;最小单位&lt;/strong&gt;，比如：日志文件中的日志项、一张唱片的详情等。&lt;/p&gt;

&lt;p&gt;它会被序列化成 &lt;strong&gt;JSON&lt;/strong&gt; 格式 （ 无需预定格式、类型可以指定也可以自动推算、可嵌套，支持数组 ）。&lt;/p&gt;

&lt;p&gt;每个文档都有一个 &lt;strong&gt;Unique ID&lt;/strong&gt;，可以自己指定，也可以由 ES 自动生成。&lt;/p&gt;

&lt;p&gt;文档的元数据标注了文档相关信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_index : 文档所属索引名
_type ： 文档所以类型名
_id ：文档唯一 id
_score ：相关性分数
_source : 文档原始 JSON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4g14tahrqj30nw0g20vc.jpg&quot; alt=&quot;文档&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;索引&quot;&gt;索引&lt;/h2&gt;

&lt;p&gt;索引是一类文档的集合，体现了逻辑空间的概念，有自己的 Mapping 定义，包含文档的字段名和字段类型。（分片体现的是物理空间的概念，索引中的数据分散在分片上）&lt;/p&gt;

&lt;p&gt;其中，索引的Mapping 定义文档字段的类型。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;mapping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alias&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;ignore_above&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setting 定义了不同的数据分布。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;number_of_shards&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;auto_expand_replicas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;provided_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kibana_sample_data_logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;creation_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1561535052961&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;number_of_replicas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ZgZxux9QTfW4e-oVoP3ogA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;7010099&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 ES 7.0 之前，一个索引可以设置锁哥 Type，但是从 7.0 开始一个索引只能设置一个 Type —— 也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;_doc&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;7.0 弃用了接受类型的 API，引入了新的无类型 API，并移除了对 &lt;code class=&quot;highlighter-rouge&quot;&gt;_default_&lt;/code&gt; 映射的支持。&lt;/p&gt;

&lt;p&gt;8.0 将移除接受类型的 API。&lt;/p&gt;

&lt;h2 id=&quot;索引相关操作&quot;&gt;索引相关操作&lt;/h2&gt;

&lt;p&gt;Kibana 中管理索引的界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4g15epyy1j31mg0u0k10.jpg&quot; alt=&quot;Kibana操作&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Kibana 的 dev tools 下操作索引的相关 API ：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//查看索引相关信息
GET kibana_sample_data_logs

//查看索引的文档总数
GET kibana_sample_data_logs/_count

//查看前10条文档，了解文档格式
POST kibana_sample_data_logs/_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

//_cat indices API
//查看indices，使用通配符
GET /_cat/indices/kibana&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;?v&amp;amp;s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;index

//查看状态为绿的索引
GET /_cat/indices?v&amp;amp;health&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;green

//按照文档个数排序
GET /_cat/indices?v&amp;amp;s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docs.count:desc

//查看具体的字段
GET /_cat/indices/kibana&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;?pri&amp;amp;v&amp;amp;h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;health,index,pri,rep,docs.count,mt

//How much memory is used per index?
GET /_cat/indices?v&amp;amp;h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i,tm&amp;amp;s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tm:desc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;集群&quot;&gt;集群&lt;/h2&gt;

&lt;p&gt;ES 中不同集群通过不同名字区分，默认是 “elasticsearch”。通过配置文件或者命令行指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;-E cluster.name=xxx&lt;/code&gt; 来指定。一个集群可以有一个或多个节点。&lt;/p&gt;

&lt;p&gt;集群的健康状态：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Green ：主分片和副本都分配正常
Yellow ：主分片正常，副本分片未能正常分配
Red ： 有主分片未能正常分配，例如服务器磁盘占用超过 85% 时试图创建索引
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;节点&quot;&gt;节点&lt;/h2&gt;

&lt;p&gt;节点时 ES 的一个实例，本质上是一个 JAVA 进程。一台机器可以运行多个 ES 进程，但工业环境一般一天机器只运行一个 ES 实例。&lt;/p&gt;

&lt;p&gt;每个节点都有一个名字，通过配置文件或者命令行  &lt;code class=&quot;highlighter-rouge&quot;&gt;-E node.name=xxx&lt;/code&gt; 指定。&lt;/p&gt;

&lt;p&gt;每个节点启动后会分配一个 ID，保存在 data 目录下。&lt;/p&gt;

&lt;h3 id=&quot;master-eligible-node-和-master-node&quot;&gt;Master-eligible node 和 Master node&lt;/h3&gt;

&lt;p&gt;每个节点启动后都会成为 Master-eligible node，可以参与选举成为 Master node，可以设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;node.master=false&lt;/code&gt; 来禁止。&lt;/p&gt;

&lt;p&gt;只有 Master node 能修改集群信息。每个节点都保存了集群信息，包含：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;所有节点信息
所有索引和相关 Mapping 和 Setting
分片的路由信息
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;data-node-和-coordinating-node&quot;&gt;Data node 和 Coordinating node&lt;/h3&gt;

&lt;p&gt;Data node 保存分片的数据。&lt;/p&gt;

&lt;p&gt;Coordinating node 接受客户端请求，将请求分发得到结果后汇总。每个节点默认都有 Coordinating node 的职责。&lt;/p&gt;

&lt;h3 id=&quot;其他类型的-node&quot;&gt;其他类型的 node&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Hot &amp;amp; Warm Node
 Machine Learning Node
 Tribe Node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;节点配置&quot;&gt;节点配置&lt;/h3&gt;

&lt;p&gt;在生产环境中，每个节点都应该配置成 &lt;strong&gt;单一&lt;/strong&gt; 的节点类型。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;节点类型&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;配置参数&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;默认值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;master eligible&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.master&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ingest&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.ingest&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;coordinating only&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;每个节点默认都是 coordinating，设置其他类型为 false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;machine learning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.nl&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;true ( 需 enable x-pack )&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;分片&quot;&gt;分片&lt;/h2&gt;

&lt;p&gt;主分片 （ Primary Shard ）解决水平扩展，可以将数据分布到集群内所有节点。一个分片是一个 Lucene 实例。主分片数在在索引创建时指定，不允许修改（除非 reindex）。&lt;/p&gt;

&lt;p&gt;副本 （ Replica Shard ） 解决数据高可用，可以动态调整。&lt;/p&gt;

&lt;p&gt;以下是一个三节点集群的分片情况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4g15wryeyj314a0eugnu.jpg&quot; alt=&quot;分片示例&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;集群节点相关操作&quot;&gt;集群、节点相关操作&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get _cat/nodes?v
GET /_nodes/es7_01,es7_02
GET /_cat/nodes?v
GET /_cat/nodes?v&amp;amp;h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;,ip,port,v,m


GET _cluster/health
GET _cluster/health?level&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shards
GET /_cluster/health/kibana_sample_data_logs
GET /_cluster/health/kibana_sample_data_logs?level&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shards

&lt;span class=&quot;c&quot;&gt;#### cluster state&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#### The cluster state API allows access to metadata representing the state of the whole cluster. This includes information such as&lt;/span&gt;
GET /_cluster/state

//cluster get settings
GET /_cluster/settings
GET /_cluster/settings?include_defaults&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true

&lt;/span&gt;GET _cat/shards
GET _cat/shards?h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;index,shard,prirep,state,unassigned.reason
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料和相关阅读&quot;&gt;参考资料和相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch核心技术与实战 （极客时间 阮一鸣） &lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为什么不再支持单个Index下，多个Tyeps &lt;a href=&quot;https://www.elastic.co/cn/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0&quot;&gt;https://www.elastic.co/cn/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Index API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-indices.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-indices.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Nodes API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-nodes.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-nodes.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cluster API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cluster.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cluster.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Shards API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 27 Jun 2019 09:52:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-ind-node/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-ind-node/</guid>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（02）安装 —— ES / Kibana / Logstash</title>
        <description>&lt;h2 id=&quot;elasticsearch-安装和简单配置&quot;&gt;Elasticsearch 安装和简单配置&lt;/h2&gt;

&lt;p&gt;ES 安装的地址请 &lt;a href=&quot;https://www.elastic.co/cn/downloads/elasticsearch&quot;&gt;点击这儿&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES 在 7.0 开始内置了 JAVA 环境，不需要像之前版本一样设置 $JAVA_HOME。&lt;/p&gt;

&lt;h3 id=&quot;目录结构&quot;&gt;目录结构&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;目录&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;配置&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bin&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;脚本文件，包括启动 ES、安装插件、运行统计数据等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;config&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch.yml&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;集群配置文件，user 、role based 相关配置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JDK&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;path.data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JAVA 运行环境&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;data&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;数据文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;lib&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JAVA 类库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;log&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;path.log&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;日志文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;modules&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;包含所有 ES 模块&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pliugin&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;包含素有已安装插件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;jvm-配置&quot;&gt;JVM 配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;修改 JVM  —— config/jvm.options&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置建议：Xms 和 Xmx 配置成一样，不要超过机器内存的 50%，不要超过 30 GB&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;测试&quot;&gt;测试&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//启动单节点
bin/elasticsearch

//安装插件
bin/elasticsearch-plugin &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;analysis-icu
//查看插件
bin/elasticsearch-plugin list
//查看安装的插件
GET http://localhost:9200/_cat/plugins?v

// 本机启动多节点集群 （-d 表示后台运行）
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node0 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node0_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node1 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node1_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node2 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node2_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bin/elasticsearch &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node3 &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; path.data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node3_data &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;

//查看集群
GET http://localhost:9200

//查看nodes
GET _cat/nodes
GET _cluster/health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kibana-安装&quot;&gt;Kibana 安装&lt;/h2&gt;

&lt;p&gt;Kibana 下载地址请 &lt;a href=&quot;https://www.elastic.co/cn/downloads/kibana&quot;&gt;点击这儿&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 启动 kibana
bin/kibana

// 插件
bin/kibana-plugin list
bin/kibana-plugin &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;plugin_location
bin/kibana remove

//查看
GET http://localhost:5601

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;在-docker-中运行-eskibana-和-cerebro&quot;&gt;在 Docker 中运行 ES、Kibana 和 Cerebro&lt;/h2&gt;

&lt;p&gt;切换到你想要的文件夹，新建一个文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yaml&lt;/code&gt; ，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &lt;span class=&quot;s1&quot;&gt;'2.2'&lt;/span&gt;
services:
  cerebro:
    image: lmenezes/cerebro:0.8.3
    container_name: cerebro
    ports:
      - &lt;span class=&quot;s2&quot;&gt;&quot;9000:9000&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;:
      - &lt;span class=&quot;nt&quot;&gt;-Dhosts&lt;/span&gt;.0.host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://elasticsearch:9200
    networks:
      - es7net
  kibana:
    image: docker.elastic.co/kibana/kibana:7.1.0
    container_name: kibana7
    environment:
      - &lt;span class=&quot;nv&quot;&gt;I18N_LOCALE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zh-CN
      - &lt;span class=&quot;nv&quot;&gt;XPACK_GRAPH_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;TIMELION_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;XPACK_MONITORING_COLLECTION_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
    ports:
      - &lt;span class=&quot;s2&quot;&gt;&quot;5601:5601&quot;&lt;/span&gt;
    networks:
      - es7net
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0
    container_name: es7_01
    environment:
      - cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime
      - node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01
      - bootstrap.memory_lock&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;s2&quot;&gt;&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;&lt;/span&gt;
      - discovery.seed_hosts&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01
      - cluster.initial_master_nodes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01,es7_02
    ulimits:
      memlock:
        soft: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
        hard: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
    volumes:
      - es7data1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - es7net
  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0
    container_name: es7_02
    environment:
      - cluster.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;geektime
      - node.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_02
      - bootstrap.memory_lock&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;s2&quot;&gt;&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;&lt;/span&gt;
      - discovery.seed_hosts&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01
      - cluster.initial_master_nodes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;es7_01,es7_02
    ulimits:
      memlock:
        soft: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
        hard: &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
    volumes:
      - es7data2:/usr/share/elasticsearch/data
    networks:
      - es7net


volumes:
  es7data1:
    driver: &lt;span class=&quot;nb&quot;&gt;local
  &lt;/span&gt;es7data2:
    driver: &lt;span class=&quot;nb&quot;&gt;local

&lt;/span&gt;networks:
  es7net:
    driver: bridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用 docker-compose 启动：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//启动
docker-compose up

//停止容器
docker-compose down

//停止容器并且移除数据
docker-compose down &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;logstach-的安装和数据导入&quot;&gt;Logstach 的安装和数据导入&lt;/h2&gt;

&lt;p&gt;Logstash 下载地址请 &lt;a href=&quot;https://www.elastic.co/cn/downloads/logstash&quot;&gt;点击这儿&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//下载与ES相同版本号的logstash，并解压到相应目录
//修改movielens目录下的logstash.conf文件
//path修改为实际的movies.csv路径
input &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  file &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    path &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YOUR_FULL_PATH_OF_movies.csv&quot;&lt;/span&gt;
    start_position &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;beginning&quot;&lt;/span&gt;
    sincedb_path &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dev/null&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

//启动Elasticsearch实例，然后启动 logstash，并制定配置文件导入数据
bin/logstash &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /YOUR_PATH_of_logstash.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料和相关阅读&quot;&gt;参考资料和相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch核心技术与实战 （极客时间 阮一鸣） &lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ES 安装 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ES 配置 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ES 重要配置 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;初识 Kibana &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/setup.html&quot;&gt;https://www.elastic.co/guide/en/kibana/current/setup.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kibana 插件 &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/known-plugins.html&quot;&gt;https://www.elastic.co/guide/en/kibana/current/known-plugins.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Elasticsearch on Kuvernetes &lt;a href=&quot;https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond&quot;&gt;https://www.elastic.co/cn/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CAT Plugins API &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-plugins.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-plugins.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 Docker &lt;a href=&quot;https://www.docker.com/products/docker-desktop&quot;&gt;https://www.docker.com/products/docker-desktop&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 docker-compose &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;https://docs.docker.com/compose/install/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何创建自己的 Docker Image - &lt;a href=&quot;https://www.elastic.co/cn/blog/how-to-make-a-dockerfile-for-elasticsearch&quot;&gt;https://www.elastic.co/cn/blog/how-to-make-a-dockerfile-for-elasticsearch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何在为 Docker Image 安装 Elasticsearch 插件 - &lt;a href=&quot;https://www.elastic.co/cn/blog/elasticsearch-docker-plugin-management&quot;&gt;https://www.elastic.co/cn/blog/elasticsearch-docker-plugin-management&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何设置 Docker 网络 - &lt;a href=&quot;https://www.elastic.co/cn/blog/docker-networking&quot;&gt;https://www.elastic.co/cn/blog/docker-networking&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Cerebro 源码 &lt;a href=&quot;https://github.com/lmenezes/cerebro&quot;&gt;https://github.com/lmenezes/cerebro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Jun 2019 18:50:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-install/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-install/</guid>
        
        
      </item>
    
      <item>
        <title>Elasticsearch 实战（01）综述</title>
        <description>&lt;h2 id=&quot;综述&quot;&gt;综述&lt;/h2&gt;

&lt;p&gt;Elasticsearch 是一个分布式搜索引擎，可以实现大数据近实时分析，其高性能和易扩展、易使用性受到众多公司的青睐。&lt;/p&gt;

&lt;p&gt;这个系列文章基于 Elasticsearch 7.0 进行探索和实践，参考 极客时间的 《 Elasticsearch核心技术与实战 》 系列专栏。&lt;/p&gt;

&lt;h2 id=&quot;分布式架构&quot;&gt;分布式架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4fyr77qigj30fb0bv74n.jpg&quot; alt=&quot;分布式架构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;集群规模可以从单个扩展到数百个节点，从服务和数据两个维度实现高可用和水平拓展。 ES 支持不用的节点类型，支持 Hot &amp;amp; Warm 架构。&lt;/p&gt;

&lt;h2 id=&quot;集成方式&quot;&gt;集成方式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;支持多种编程语言类库，如 Java/.NET/Python/PHP/Perl etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RESTful API （推荐） 和 Transport API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JDBC &amp;amp; ODBC&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;版本对比&quot;&gt;版本对比&lt;/h2&gt;

&lt;h3 id=&quot;5x-新特性&quot;&gt;5.x 新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于 Lucene 6.x，默认打分从 TF-IDF 改为 BM25&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持 Ingest 节点、Painless Scripting、Completion suggestion&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type 标记成 deprecated， 支持 Keyword 类型&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instant aggregation，支持分片上聚合的缓存&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新增 Profile API&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6x-新特性&quot;&gt;6.x 新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于 Lucene 7.x&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持跨集群复制 （CCR）、索引生命周期管理、SQL&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据迁移优化&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;优化稀疏字段存储&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;索引时进行排序，加快查询&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7x-新特性&quot;&gt;7.x 新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于 Lucene 8.0，正式废除单索引多 Type 的支持&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Security 功能免费&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ECK —— Elasticsearch Operator on Kubernetes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Cluster coordination&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feature-Complete High Level REST Client&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Script Score Query&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;默认 Primary Shard 从 5 变成 1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;产品生态圈&quot;&gt;产品生态圈&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4fyu8h14oj30k00a1755.jpg&quot; alt=&quot;产品生态圈&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Logstash ：开源服务器端数据处理管道，支持不同来源的数据采集、转换、存储，实现解析和转换数据，可拓展（插件安装，Log、DB、Arcsign、Netflow），可靠性，数据传输加密、监控&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kibana ： 数据可视化&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BEATS ： 轻量的数据采集器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;X-Pack ： 商业化套件，OSS、Basic、黄金级、白金级，基础班免费&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;应用场景&quot;&gt;应用场景&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;搜索类 ：集成数据库同步数据、不推荐作为独立数据存储使用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日志类 ： Logstash 和 Beats 满足不用的数据源， Kafka 作为消息队列&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4fyurnrqfj30ij09hmyy.jpg&quot; alt=&quot;日志类技术栈&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考链接与相关阅读&quot;&gt;参考链接与相关阅读&lt;/h2&gt;

&lt;p&gt;[1] Elasticsearch核心技术与实战 （极客时间 阮一鸣）&lt;a href=&quot;https://time.geekbang.org/course/intro/197&quot;&gt;https://time.geekbang.org/course/intro/197&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] Elasticsearch Certification &lt;a href=&quot;https://www.elastic.co/cn/training/certification&quot;&gt;https://www.elastic.co/cn/training/certification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] ElasticSearch Engineering I training &lt;a href=&quot;https://www.elastic.co/cn/training/elasticsearch-engineer-1&quot;&gt;https://www.elastic.co/cn/training/elasticsearch-engineer-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4] ElasticSearch Engineering II training &lt;a href=&quot;https://www.elastic.co/cn/training/elasticsearch-engineer-2&quot;&gt;https://www.elastic.co/cn/training/elasticsearch-engineer-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5] ES 7.0 发布 &lt;a href=&quot;https://www.elastic.co/blog/elasticsearch-7-0-0-released&quot;&gt;https://www.elastic.co/blog/elasticsearch-7-0-0-released&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6] X-Pack 开源 &lt;a href=&quot;https://www.elastic.co/products/x-pack/open&quot;&gt;https://www.elastic.co/products/x-pack/open&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[7] 用户案例 &lt;a href=&quot;https://www.elastic.co/cn/use-cases/&quot;&gt;https://www.elastic.co/cn/use-cases/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[8] Top 5 Elasticsearch Use Cases &lt;a href=&quot;https://www.objectrocket.com/blog/elasticsearch/top-elasticsearch-use-cases/&quot;&gt;https://www.objectrocket.com/blog/elasticsearch/top-elasticsearch-use-cases/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[9] Elastic Stack — A Brief Introduction &lt;a href=&quot;https://hackernoon.com/elastic-stack-a-brief-introduction-794bc7ff7d4f&quot;&gt;https://hackernoon.com/elastic-stack-a-brief-introduction-794bc7ff7d4f&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 26 Jun 2019 18:46:01 +0800</pubDate>
        <link>http://localhost:4000/2019/06/ES-intro/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/ES-intro/</guid>
        
        
      </item>
    
      <item>
        <title>数据结构和算法（11）：堆排序</title>
        <description>&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;

&lt;p&gt;堆是完全二叉树，其中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。&lt;/p&gt;

&lt;h2 id=&quot;存储&quot;&gt;存储&lt;/h2&gt;

&lt;p&gt;使用数组来存储堆，下标为 
&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;
 的节点的左子节点，就是下标为 
&lt;script type=&quot;math/tex&quot;&gt;i * 2&lt;/script&gt;
 的节点，右子节点就是下标为 
&lt;script type=&quot;math/tex&quot;&gt;i * 2 + 1&lt;/script&gt;
 的节点，父节点下标是 
&lt;script type=&quot;math/tex&quot;&gt;\frac{i}{2}&lt;/script&gt;
。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4huhn2kbsj30vq0f0aa3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;插入元素&quot;&gt;插入元素&lt;/h2&gt;

&lt;p&gt;把新插入的元素放到堆的最后，之后进行调整，让其重新满足堆的特性 —— 这个过程叫做 &lt;strong&gt;堆化&lt;/strong&gt;（heapify）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4huisnha4j30vq0lkwfc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;核心代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  public void insert(int data) {
    if (count &amp;gt;= n) return; // 堆满了
    ++count;
    a[count] = data;
    int i = count;
    while (i/2 &amp;gt; 0 &amp;amp;&amp;amp; a[i] &amp;gt; a[i/2]) { // 自下往上堆化
      swap(a, i, i/2); // swap() 函数作用：交换下标为 i 和 i/2 的两个元素
      i = i/2;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;删除元素&quot;&gt;删除元素&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4hujhnz4ij30vq0nsmy6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void removeMax() {
  if (count == 0) return -1; // 堆中没有数据
  a[1] = a[count];
  --count;
  heapify(a, count, 1);
}

private void heapify(int[] a, int n, int i) { // 自上往下堆化
  while (true) {
    int maxPos = i;
    if (i*2 &amp;lt;= n &amp;amp;&amp;amp; a[i] &amp;lt; a[i*2]) maxPos = i*2;
    if (i*2+1 &amp;lt;= n &amp;amp;&amp;amp; a[maxPos] &amp;lt; a[i*2+1]) maxPos = i*2+1;
    if (maxPos == i) break;
    swap(a, i, maxPos);
    i = maxPos;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;建堆&quot;&gt;建堆&lt;/h2&gt;

&lt;h3 id=&quot;思路&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;有两种建堆的思路。&lt;/p&gt;

&lt;p&gt;一种是借助插入元素的思路，假设一开始只有一个数据，然后将下边为 2 到 n 的数据依次插入。&lt;/p&gt;

&lt;p&gt;另外一种是从后往前处理实现堆化。核心代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static void buildHeap(int[] a, int n) {
  for (int i = n/2; i &amp;gt;= 1; --i) {  // 下标 n/2+1 到 n 是叶子节点，不需要堆化
    heapify(a, n, i);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;时间复杂度分析&quot;&gt;时间复杂度分析&lt;/h3&gt;

&lt;p&gt;堆化时间复杂度是 
&lt;script type=&quot;math/tex&quot;&gt;O(log n)&lt;/script&gt;
 ，共有 
&lt;script type=&quot;math/tex&quot;&gt;\frac{n}{2} + 1&lt;/script&gt;
 个节点，如果说时间复杂度是 
&lt;script type=&quot;math/tex&quot;&gt;O(n log n)&lt;/script&gt;
 其实并没有错，但是不够准确，实际时间复杂度是 
&lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt;
 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4hujzq6kaj30vq0l73yv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可知，对每个非叶子节点的高度求和：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_{1}=1 * h+2^{1} *(h-1)+2^{2} *(h-2)+\cdots+2^{k} *(h-k)+\cdots+2^{n-1} * 1&lt;/script&gt;

&lt;p&gt;可得：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_{2}=\quad 2^{1} * h+2^{2} *(h-1)+\cdots+2^{k} *(h-k+1)+\cdots+2^{n-1} * 2+2^{h} * 1&lt;/script&gt;

&lt;p&gt;合并：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S=S_{2}-S_{1}=-h+2+2^{2}+2^{3}+\cdots+2^{k}+\cdots+2^{n-1}+2^{n}&lt;/script&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S=-h+\left(2^{n}-2\right)+2^{n}=2^{n+1}-h-2&lt;/script&gt;

&lt;p&gt;因为 
&lt;script type=&quot;math/tex&quot;&gt;h = log_2 n&lt;/script&gt;
 ，代入 S 得到 
&lt;script type=&quot;math/tex&quot;&gt;S = O(n)&lt;/script&gt;
。&lt;/p&gt;

&lt;h2 id=&quot;排序&quot;&gt;排序&lt;/h2&gt;

&lt;p&gt;堆化后将堆顶元素放在最后，重复直到结束：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// n 表示数据的个数，数组 a 中的数据从下标 1 到 n 的位置。
public static void sort(int[] a, int n) {
  buildHeap(a, n);
  int k = n;
  while (k &amp;gt; 1) {
    swap(a, 1, k);
    --k;
    heapify(a, k, 1);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;复杂度&quot;&gt;复杂度&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;操作&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;时间复杂度&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;插入元素&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(log n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;删除元素&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(log n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;建堆&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n log n)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;常见问题&quot;&gt;常见问题&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;为什么快速排序比堆排序的性能好？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一，数据访问方式：快速排序顺序访问，堆排序跳跃访问，对 CPU 缓存不友好。&lt;/p&gt;

&lt;p&gt;二，数据交换次数：对于基于比较的排序算法来说，整个排序过程就是由两个基本的操作组成的，比较和交换（或移动）。快速排序数据交换的次数不会比逆序度多。但是堆排序的第一步是建堆，建堆的过程会打乱数据原有的相对先后顺序，导致原数据的有序度降低。比如，对于一组已经有序的数据来说，经过建堆之后，数据反而变得无序。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;假设有 100 个小文件，每个文件的大小是 100MB，每个文件中存储的都是有序的字符串。怎么将这些 100 个小文件合并成一个有序的大文件？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用堆实现优先队列。从各个文件选取一行，堆化后将堆顶删除加入大文件，再从堆顶对应的文件中选择下一行加入堆。直到结束。删除堆顶数据和往堆中插入数据的时间复杂度都是 O(logn)，n 表示堆中的数据个数，这里就是 100。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;实现定时器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用优先级队列来解决。按照任务设定的执行时间，将任务存储在优先级队列中，队列首部（也就是小顶堆的堆顶）存储的是最先执行的任务。这样，定时器就不需要每隔 1 秒就扫描一遍任务列表了。它拿队首任务的执行时间点，与当前时间点相减，得到一个时间间隔 T。当 T 秒时间过去之后，定时器取优先级队列中队首的任务执行。然后再计算新的队首任务的执行时间点与当前时间点的差值，把这个值作为定时器执行下一个任务需要等待的时间。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;怎么用堆求 Top K ？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;建小顶堆保持 Top K 数据。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;求动态数据的中位数。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用一个大顶堆（保存前半部分）和一个小顶堆（保存后半部分）来保存数据。实际上这个方法可以用来求取任何比例位置的数字。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4hul5holtj30vq0kpjrz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;算法题&quot;&gt;算法题&lt;/h2&gt;

&lt;h3 id=&quot;leetcode-23-merge-k-sorted-lists&quot;&gt;LeetCode 23. Merge k Sorted Lists&lt;/h3&gt;

&lt;p&gt;合并 k 个有序列表。&lt;/p&gt;

&lt;p&gt;使用上述的有限队列，将各个列表第一个元素插入堆。堆顶删除，获取其下一个元素（如果有）插入堆。时间复杂度 O(N log k)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeKLists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;leetcode-215-kth-largest-element-in-an-array&quot;&gt;LeetCode 215. Kth Largest Element in an Array&lt;/h3&gt;

&lt;p&gt;求数组中第 K 大元素。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# 解法一：元素少的情况下直接 sort 就好
# Time: O(nlogn) | Space: O(1)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findKthLargest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 解法二：使用max heap，堆化后 pop 就可以得到结果
# Time: O(n + klog(n)) | Space: O(n)
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;heapq&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findKthLargest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# heapq.heapify 后是 min heap，所以需要使用负数模拟max heap
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heapify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'inf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 解法三：使用 min heap
# Time: O(k) + O((n-k) * logk) | Space: O(K)
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;heapq&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findKthLargest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;min_heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-inf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 初始化一个 min heap
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heapify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 如果数字大于堆顶元素，则把堆顶元素删除，然后将数字插入
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;leetcode-347-top-k-frequent-elements&quot;&gt;LeetCode 347. Top K Frequent Elements&lt;/h3&gt;

&lt;p&gt;Given a non-empty array of integers, return the k most frequent elements.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;计数，然后使用堆取Top K。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;topKFrequent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlargest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 05 Jun 2019 00:02:11 +0800</pubDate>
        <link>http://localhost:4000/2019/06/alg-heap/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/alg-heap/</guid>
        
        
      </item>
    
      <item>
        <title>数据结构和算法（08）：二叉树</title>
        <description>&lt;h2 id=&quot;存储&quot;&gt;存储&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;链式存储&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4hu7y9igoj30vq0kejro.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;顺序存储&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g4hu8a2cn8j30vq0g9q33.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;访问方式&quot;&gt;访问方式&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4hu7370wzj30vq0g6gmk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二叉查找树&quot;&gt;二叉查找树&lt;/h2&gt;

&lt;h3 id=&quot;定义&quot;&gt;定义&lt;/h3&gt;

&lt;p&gt;二叉查找树 ： 在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。&lt;/p&gt;

&lt;h3 id=&quot;查找&quot;&gt;查找&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4hu5m3evij30vq0h4t8t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;插入&quot;&gt;插入&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1g4hu61pfpmj30vq0gqmxa.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;删除&quot;&gt;删除&lt;/h3&gt;

&lt;p&gt;删除操作有三种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;要删除的节点没有子节点，直接删除&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要删除的几点只有一个子节点，则将其父节点指向其子节点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有两个子节点，则找到右子树中的最小节点，替换到要删除的节点。如下&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4hu94fwkbj30vq0h8t97.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;输出有序序列&quot;&gt;输出有序序列&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;中序&lt;/strong&gt; 遍历二叉查找树，可以输出有序的数据序列，时间复杂度是 &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt;。&lt;/p&gt;

&lt;h3 id=&quot;支持重复数据&quot;&gt;支持重复数据&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79ly1g4hua6rp3oj30vq0ffq2x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;时间复杂度&quot;&gt;时间复杂度&lt;/h3&gt;

&lt;p&gt;平衡二叉查找树的高度接近 logn，所以插入、删除、查找操作的时间复杂度也比较稳定，是 O(logn)。&lt;/p&gt;

&lt;h2 id=&quot;红黑树&quot;&gt;红黑树&lt;/h2&gt;

&lt;h3 id=&quot;平衡二叉查找树&quot;&gt;平衡二叉查找树&lt;/h3&gt;

&lt;p&gt;平衡二叉树：二叉树中任意一个节点的左右子树的高度相差不能大于 1。&lt;/p&gt;

&lt;p&gt;平衡二叉查找树：不仅满足上面平衡二叉树的定义，还满足二叉查找树的特点。比如 AVL 树、Splay Tree（伸展树）、Treap（树堆）、红黑树等。&lt;/p&gt;

&lt;h3 id=&quot;红黑树定义&quot;&gt;红黑树定义&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;根节点是黑色的；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；&amp;lt;/p&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1g4huavyjirj30vq0d5aa6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;常见问题&quot;&gt;常见问题&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;散列表的插入、删除、查找操作的时间复杂度可以做到常量级的 O(1)，而二叉查找树在比较平衡的情况下，插入、删除、查找操作时间复杂度才是 O(logn)，为什么还要用二叉查找树呢？&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;散列表是无序存储，二叉查找树中序遍历可以在 O(n) 时间复杂度下输出有序序列&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;散列表扩容耗时多&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;散列表存在哈希冲突问题，实际查找速度未必比 O(logn) 快&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;散列表需要考虑散列函数设计、哈希冲突、扩容等问题，平衡二叉查找树考虑平衡性问题，前者比较复杂&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;为什么在工程中大家都喜欢用红黑树这种平衡二叉查找树，而不是其他的平衡二叉查找树？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Treap 、 Splay Tree 操作效率高，但是无法避免极端情况下时间复杂度退化。AVL 树高度平衡，所以维护代价高。红黑树只是近似平衡，所有维护成本比 AVL 树低，其插入、删除、查找等性能比较稳定。&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Jun 2019 00:02:08 +0800</pubDate>
        <link>http://localhost:4000/2019/06/alg-tree/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/alg-tree/</guid>
        
        
      </item>
    
  </channel>
</rss>
